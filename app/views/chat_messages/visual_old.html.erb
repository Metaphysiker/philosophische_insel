<script src="https://d3js.org/d3.v7.min.js"></script>

<style>

	.node circle {
	  fill: #fff;
	  stroke: steelblue;
	  stroke-width: 3px;
		cursor: pointer;
	}


	.node text {
    font: 18px;
    font-weight: bold;
  }

	.link {
	  fill: none;
	  stroke: #ccc;
	  stroke-width: 1px;
	}

	.click-circle {
		cursor: pointer;
	}

</style>

<div id="diagram">

</div>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>

<script>
var treeData = [<%= raw @chat_message.to_node2(0).to_json %>];

root = treeData[0];

// ************** Generate the tree diagram	 *****************
var margin = {top: 50, right: 120, bottom: 20, left: 120},
	width = 4000 - margin.right - margin.left,
	height = 4000 - margin.top - margin.bottom;

//var width = $(window).width() * 4 - margin.right - margin.left;
//	var height = $(window).height() * 4 - margin.top - margin.bottom;

// compute the new width
var levelWidth = [1];
var childCount = function(level, n) {

	if(n.children && n.children.length > 0) {
		if(levelWidth.length <= level + 1) levelWidth.push(0);

		levelWidth[level+1] += n.children.length;
		n.children.forEach(function(d) {
			childCount(level + 1, d);
		});
	}
};
childCount(0, root);
var newWidth = d3.max(levelWidth) * 700; // 20 pixels per line
//tree = tree.size([newHeight, width]);
//console.log(levelWidth);
var newHeight = levelWidth.length * 200 //

width = newWidth;
height = newHeight;

var i = 0;

var tree = d3.tree()
	.size([width, height]);

var diagonal = d3.linkHorizontal()
    .x(function(d) { return d.y; })
    .y(function(d) { return d.x; });

  var line = d3.line()
      .x(function(d) {
          return d.x; // because tree is horizontal
      })
      .y(function(d) {
          return d.y; // because tree is horizontal
      });

var svg = d3.select("#diagram").append("svg")
	.attr("width", width + margin.right + margin.left)
	.attr("height", height + margin.top + margin.bottom)
  .append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");


update(root);

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
	  links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) {
      //d.y = d.depth * 100;
      d.x = d.x * 1;
      d.y = d.depth * 180;
                });

  // Declare the nodes…
  var node = svg.selectAll("g.node")
	  .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter the nodes.
  var nodeEnter = node.enter().append("g")
	  .attr("class", "node")
	  .attr("transform", function(d) {
		  return "translate(" + d.x + "," + d.y + ")"; });

  nodeEnter.append("circle")
	  .attr("r", 1)
		//.attr("class", "click-circle")
		.attr("id_of_message", function(d) { return d.id_of_message})
	  .style("fill", "#fff");

		nodeEnter.append("svg:defs").append("svg:marker")
    .attr("id", "triangle")
    .attr("refX", 6)
    .attr("refY", 6)
    .attr("markerWidth", 30)
    .attr("markerHeight", 30)
    .attr("orient", "auto")
    .append("path")
    .attr("d", "M 0 0 12 6 0 12 3 6")
    .style("fill", "black");

		/*nodeEnter.append("div")
			.attr("class", "click-circle")
			.style("opacity", 1)
			.html("<b>Hey!</b>")*/


		nodeEnter.append("foreignObject")
		.attr("y", function(d) {
			return d.children || d._children ? -0 : 0; })
		.attr("x", function(d){
			return -150;
		})
		//.attr("dy", ".35em")
    .attr("width", 300)
    .attr("height", 200)
  	.append("xhtml:div")
		.html(function(d) {
			return `
				<div class="border click-circle text-center bg-light p-1 mb-1 rounded" id_of_message=${d.id_of_message}>
						<p>
								${d.name}
						</p>
						<p>
							${d.chatter}
						</p>
				</div>
				<div class="">
					<p>
						<a class="btn btn-primary mr-1" href="/chat_messages/${d.id_of_message}/edit" role="button">Bearbeiten</a>
						<a class="btn btn-success mr-1" href="/chat_messages/new?parent_id=${d.id_of_message}" role="button">Kind hinzufügen</a>
					</p>
					</div>
			`
		}

		)



		/*
		.append('div')
		.attr("id_of_message", function(d) { return d.id_of_message})
		.attr('class', "border click-circle text-center bg-light p-1 rounded")
		.append('p')
		.text(function(d) { return d.name; })
		.append('div')
		.attr("id_of_message", function(d) { return d.id_of_message})
		.attr('class', "border toggle_modal text-center bg-light p-1 rounded")
		.text("Kommentieren");
    //.html(function(d) { return "<div class=\"border click-circle text-center bg-light p-1 rounded\" id_of_message=\"" + d.id_of_message + "\"><b>" + d.name + "</div></b>"; });
		*/


/*
		nodeEnter.append("foreignObject")
		.attr("y", function(d) {
			return d.children || d._children ? 50 : 100; })
		.attr("x", function(d){
			return -1;
		})
		//.attr("dy", ".35em")
    .attr("width", 300)
    .attr("height", 200)
  	.append("xhtml:div")
		.append('div')
		.attr('class', "border toggle_modal text-center bg-light p-1 rounded");

		*/


  // Declare the links…
  var link = svg.selectAll("path.link")
	  .data(links, function(d) { return d.target.id; });

  // Enter the links.
  link.enter().insert("path", "g")
	  .attr("class", "link")
    .attr("d", function(d) {
                return line([d.source, d.target]);
            });
	  //.attr("d", diagonal);

}

	$( ".click-circle" ).click(function() {
	 var id_of_message = $( this ).attr( 'id_of_message' );
	 window.location.href = window.location.origin + "/chat_messages_controller/visual/" + id_of_message;
	});

	$( ".click-add-message" ).click(function() {
	 var id_of_message = $( this ).attr( 'id_of_message' );
	 window.location.href = window.location.origin + "/chat_messages_controller/visual/" + id_of_message;
	});

	$(".click-circle").hover(function(){
	  //$(this).css("background-color", "yellow !important");
		$( this ).removeClass( "bg-light" );
		$( this ).addClass( "bg-primary" );
	  }, function(){
	  //$(this).css("fill", "white");
		$( this ).addClass( "bg-light" );
		$( this ).removeClass( "bg-primary" );
	});

	$(".toggle_modal").hover(function(){
		//$(this).css("background-color", "yellow !important");
		$( this ).removeClass( "bg-light" );
		$( this ).addClass( "bg-primary" );
		}, function(){
		//$(this).css("fill", "white");
		$( this ).addClass( "bg-light" );
		$( this ).removeClass( "bg-primary" );
	});


		$('html').scrollLeft(width/2 - 450);

		$( ".toggle_modal" ).click(function() {
			var id_of_message = $( this ).attr( 'id_of_message' );

				$.ajax({
					url: "/comments/comment_function/" + id_of_message + ".js",
					method: 'GET'
				}).done(function(response) {
				//$("#overview_modal-body").replaceWith(response);
				$("#overview_modal-body").empty().append(response);
			})

			$('#overview_modal').modal('toggle')
		});


</script>
