<div class="container">
  <h1>Cockpit - vegan.ch</h1>
  <p>
    <strong>Hinweis:</strong>
    Um das Cockpit zu verwenden muss man Google <strong>zwei Mal</strong> eine Erlaubnis erteilen.
  </p>
  <ul>
    <li>
      Ein Mal f체r <strong>Google Sheets</strong>
    </li>
    <li>
      Ein Mal f체r <strong>Google Analytics</strong>
    </li>
  </ul>
  <p>
    Wenn man auf diesen Button klickt, dann werden die Daten von Google Sheets geladen.
    Anschliessend wird man auf die n채chste Seite weitergeleitet, wo man Google Analytics die Erlaubnis erteilen muss.
  </p>
  <p>
      Bei Fehler, Fragen oder Schwierigkeiten: <%= mail_to "sandro@vegan.ch", "sandro@vegan.ch" %>
  </p>

  <!--Add buttons to initiate auth sequence and sign out-->
  <button id="authorize_button" style="display: none;">Erlaubnis f체r Google Sheets erteilen</button>
  <button id="signout_button" style="display: none;">Abmelden</button>

  <pre id="content" style="white-space: pre-wrap;"></pre>

</div>

<script type="text/javascript">
  // Client ID and API key from the Developer Console
  var CLIENT_ID = '833538385040-c5as5v0mlsjshd3n8d682haiet90lvts.apps.googleusercontent.com';
  var API_KEY = '<%= Rails.application.credentials[:google_sheets_api_key] %>';

  // Array of API discovery doc URLs for APIs used by the quickstart
  var DISCOVERY_DOCS = ["https://sheets.googleapis.com/$discovery/rest?version=v4"];

  // Authorization scopes required by the API; multiple scopes can be
  // included, separated by spaces.
  var SCOPES = "https://www.googleapis.com/auth/spreadsheets.readonly";

  var authorizeButton = document.getElementById('authorize_button');
  var signoutButton = document.getElementById('signout_button');

  /**
   *  On load, called to load the auth2 library and API client library.
   */
  function handleClientLoad() {
    gapi.load('client:auth2', initClient);
  }

  /**
   *  Initializes the API client library and sets up sign-in state
   *  listeners.
   */
  function initClient() {
    gapi.client.init({
      apiKey: API_KEY,
      clientId: CLIENT_ID,
      discoveryDocs: DISCOVERY_DOCS,
      scope: SCOPES
    }).then(function () {
      // Listen for sign-in state changes.
      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

      // Handle the initial sign-in state.
      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      authorizeButton.onclick = handleAuthClick;
      signoutButton.onclick = handleSignoutClick;
    }, function(error) {
      appendPre(JSON.stringify(error, null, 2));
    });
  }

  /**
   *  Called when the signed in status changes, to update the UI
   *  appropriately. After a sign-in, the API is called.
   */
  function updateSigninStatus(isSignedIn) {
    if (isSignedIn) {
      authorizeButton.style.display = 'none';
      signoutButton.style.display = 'block';

      Promise.all([getRegistrations(), getDonations()]).then((values) => {
        //console.log(values);
        window.location.href = '/cockpit?' + values[0] + "&" + values[1];
        //window.location.href = '/cockpit?' + values[1];


      });

      //getRegistrations().then((result) => console.log(result));
      //getRegistrations();
      //getDonations();
    } else {
      authorizeButton.style.display = 'block';
      signoutButton.style.display = 'none';
    }
  }

  /**
   *  Sign in the user upon button click.
   */
  function handleAuthClick(event) {
    gapi.auth2.getAuthInstance().signIn();
  }

  /**
   *  Sign out the user upon button click.
   */
  function handleSignoutClick(event) {
    gapi.auth2.getAuthInstance().signOut();
  }

  /**
   * Append a pre element to the body containing the given message
   * as its text node. Used to display the results of the API call.
   *
   * @param {string} message Text to be placed in pre element.
   */
  function appendPre(message) {
    var pre = document.getElementById('content');
    var textContent = document.createTextNode(message + '\n');
    pre.appendChild(textContent);
  }

  /**
   * Print the names and majors of students in a sample spreadsheet:
   * https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit
   */
  function getRegistrations() {
    return new Promise(function(resolve, reject){

    gapi.client.sheets.spreadsheets.values.get({
      spreadsheetId: '1_WjkByjVFeBLvvi-LDtZL1CX7g4qM-X6m9_wBECT7Sk',
      range: 'A:C',
    }).then(function(response) {

      var registrations_per_month = {};

      var range = response.result;
      if (range.values.length > 0) {
        for (i = 0; i < range.values.length; i++) {
          var row = range.values[i];
          if(typeof row[2] != "undefined" ){
            if((row[2].includes("Mitglied")) || (row[2].includes("mitglied"))){
              //console.log(row[2]);
              appendPre(row[0] + ', ' + row[1] + ', ' + row[2]);
              //registrations[row[0]] = row[1];

              row[0].split("-")
              var year_month = "registration-" + row[0].split("-")[0] + "-" + row[0].split("-")[1];

              //check if key exists
              if(year_month in registrations_per_month) {
                registrations_per_month[year_month] = registrations_per_month[year_month] + parseInt(row[1], 10);
              } else {
                registrations_per_month[year_month] = parseInt(row[1], 10);
              }
            }
          }


          if(i+1 >= range.values.length){
            resolve(new URLSearchParams(registrations_per_month).toString());
            //window.location.href = '/cockpit?' + new URLSearchParams(registrations_per_month).toString();
          }
        }
      } else {
        appendPre('No data found.');
        reject("Error");
      }
    }, function(response) {
      reject("Error");
      appendPre('Error: ' + response.result.error.message);
    });
  })
  }

  function getDonations() {
    return new Promise(function(resolve, reject){

    gapi.client.sheets.spreadsheets.values.get({
      spreadsheetId: '1_WjkByjVFeBLvvi-LDtZL1CX7g4qM-X6m9_wBECT7Sk',
      range: 'A:C',
    }).then(function(response) {

      var donations_per_month = {};

      var range = response.result;
      if (range.values.length > 0) {
        for (i = 0; i < range.values.length; i++) {
          var row = range.values[i];
          if(typeof row[2] != "undefined" ){
            if(row[2].includes("Spende")){
              //console.log(row[2]);
              appendPre(row[0] + ', ' + row[1] + ', ' + row[2]);
              //registrations[row[0]] = row[1];

              row[0].split("-")
              var year_month = "donation-" + row[0].split("-")[0] + "-" + row[0].split("-")[1];

              //check if key exists
              if(year_month in donations_per_month) {
                donations_per_month[year_month] = donations_per_month[year_month] + parseInt(row[1], 10);
              } else {
                donations_per_month[year_month] = parseInt(row[1], 10);
              }
            }
          }

          //appendPre(row[0] + ', ' + row[1] + ', ' + row[2]);
          //donations[row[0]] = row[1];

          if(i+1 >= range.values.length){
            resolve(new URLSearchParams(donations_per_month).toString());
            console.log(donations_per_month);
            //window.location.href = '/cockpit?' + new URLSearchParams(donations_per_month).toString();;
          }
        }
      } else {
        reject("error");
        appendPre('No data found.');
      }
    }, function(response) {
      reject("error");
      appendPre('Error: ' + response.result.error.message);
    });
  })
  }

</script>

<script async defer src="https://apis.google.com/js/api.js"
  onload="this.onload=function(){};handleClientLoad()"
  onreadystatechange="if (this.readyState === 'complete') this.onload()">
</script>
