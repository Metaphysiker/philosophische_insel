<div class="container">
      <h1>Cockpit - vegan.ch</h1>
      <h2><%= @start_date.strftime("%Y-%m-%d") %> - <%= @end_date.strftime("%Y-%m-%d") %></h2>
      <!-- The Sign-in button. This will run `queryReports()` on success. -->
      <p class="g-signin2" data-onsuccess="startQueries"></p>

      <h2>Monatliche Übersicht</h2>
      <table class="table monthly_overview_table">
        <thead>

          <tr class="head_tr">
            <th scope="col">Monat</th>
            <th scope="col">Pageviews</th>
            <th scope="col">unique Pageviews</th>
            <th scope="col">Sessions</th>
            <th scope="col">Users</th>
                      <!--
            <th scope="col">Monat</th>
                      -->
          </tr>

        </thead>
        <tbody class="tbody">

        </tbody>
      </table>

      <h2>Monatliche Mitgliedseite-Übersicht</h2>
      <table class="table monthly_member_page_overview_table">
        <thead>

          <tr class="head_tr">
            <th scope="col">Monat</th>
            <th scope="col">Besucher</th>
            <th scope="col">Effektive Anmeldungen</th>
                      <!--
            <th scope="col">Monat</th>
                      -->
          </tr>

        </thead>
        <tbody class="tbody">

        </tbody>
      </table>

      <h2>Monatliche Spendeseite-Übersicht</h2>
      <table class="table monthly_donation_page_overview_table">
        <thead>

          <tr class="head_tr">
            <th scope="col">Monat</th>
            <th scope="col">Besucher</th>
            <th scope="col">Effektive Spenden</th>
                      <!--
            <th scope="col">Monat</th>
                      -->
          </tr>

        </thead>
        <tbody class="tbody">

        </tbody>
      </table>
</div>

<script>
  // Replace with your view ID.
  var VIEW_ID = "235111240";
  var options = {  year: 'numeric', month: 'long' };
  var startDate = "<%= Date.today.beginning_of_month.strftime("%Y-%m-%d") %>";
  var endDate = "<%= Date.today.end_of_month.strftime("%Y-%m-%d") %>";
  var request = <%= raw @request.to_json %>;
  var current_step = 0;
  var dateRange =
              {
              startDate: '2021-01-01',
                endDate: '2021-01-31'
              };


  function startQueries() {
     //montlyOverviewReport(request.dateRanges[current_step]);
     //do_a_report().then(result => console.log(result));
     //monthly_overview_reportx(request.dateRanges).then(result => console.log(result));
     monthly_overview_report(0, request.dateRanges).then(result => console.log(result));
  }



  function do_a_report() {
    return new Promise(function(resolve, reject) {

      setTimeout(() => resolve("done"), 800);
      setTimeout(() => reject(new Error("Whoops!")), 1000);
    });
  }

  function monthly_overview_reportxx(iteration_step, dateRanges){

    gapi.client.request({
      path: '/v4/reports:batchGet',
      root: 'https://analyticsreporting.googleapis.com/',
      method: 'POST',
      body: {
        reportRequests: [
          {
            viewId: VIEW_ID,
            dateRanges: [dateRanges[iteration_step]],
            metrics: [
              {
                expression: 'ga:pageviews'
              },
              {
                expression: 'ga:uniquePageviews'
              },
              {
                expression: 'ga:sessions'
              },
              {
                expression: 'ga:users'
              }
            ]
          }
        ]
      }
    }).then(function(response){

      var metrics = response.result.reports[0].data.rows[0].metrics;
      for (var i = 0; i < metrics.length; i++) {
        var values = metrics[i].values;
        $(".monthly_overview_table  .tbody").append(`
        <tr>
        </tr>
        `);
        var date_of_current_row = new Date(dateRanges[iteration_step].startDate);
        $(".monthly_overview_table tr:last").append(`
          <td>${date_of_current_row.toLocaleDateString('de-DE', options)}</td>
        `);

        for (var inner_i = 0; inner_i < values.length; inner_i++) {
            $(".monthly_overview_table tr:last").append(`
              <td>${values[inner_i]}</td>
            `);
        }
      }

      if(iteration_step + 1 < dateRanges.length){
         monthly_overview_report(iteration_step + 1, dateRanges)
      } else {

      }

    })


  }

  function monthly_overview_report(iteration_step, dateRanges){

    return new Promise(function(outer_promise_resolve, outer_promise_reject) {

      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)
      {
          //p = p.then(() => new Promise(resolve => setTimeout(resolve, 300))).then(() => console.log(i));

          p = p.then(() => new Promise(function(resolve, reject) {

            gapi.client.request({
              path: '/v4/reports:batchGet',
              root: 'https://analyticsreporting.googleapis.com/',
              method: 'POST',
              body: {
                reportRequests: [
                  {
                    viewId: VIEW_ID,
                    dateRanges: [dateRanges[main_index]],
                    metrics: [
                      {
                        expression: 'ga:pageviews'
                      },
                      {
                        expression: 'ga:uniquePageviews'
                      },
                      {
                        expression: 'ga:sessions'
                      },
                      {
                        expression: 'ga:users'
                      }
                    ]
                  }
                ]
              }
            }).then(function(response){


              var metrics = response.result.reports[0].data.rows[0].metrics;
              for (var i = 0; i < metrics.length; i++) {
                var values = metrics[i].values;
                $(".monthly_overview_table  .tbody").append(`
                <tr>
                </tr>
                `);
                var date_of_current_row = new Date(dateRanges[main_index].startDate);
                $(".monthly_overview_table tr:last").append(`
                  <td>${date_of_current_row.toLocaleDateString('de-DE', options)}</td>
                `);

                for (var inner_i = 0; inner_i < values.length; inner_i++) {
                    $(".monthly_overview_table tr:last").append(`
                      <td>${values[inner_i]}</td>
                    `);
                }
              }

              resolve("done");
              if(main_index + 1 >= dateRanges.length){
                outer_promise_resolve("this report is done");
              }

            })

        } // end of inner promise


      ));
    } // end of for loop
    })
  }




  // Query the API and print the results to the page.
  function montlyOverviewReport(dateRange) {
    gapi.client.request({
      path: '/v4/reports:batchGet',
      root: 'https://analyticsreporting.googleapis.com/',
      method: 'POST',
      body: {
        reportRequests: [
          {
            viewId: VIEW_ID,
            dateRanges: [dateRange],
            metrics: [
              {
                expression: 'ga:pageviews'
              },
              {
                expression: 'ga:uniquePageviews'
              },
              {
                expression: 'ga:sessions'
              },
              {
                expression: 'ga:users'
              }
            ]
          }
        ]
      }
    }).then(function(response){

      var metrics = response.result.reports[0].data.rows[0].metrics;
      for (var i = 0; i < metrics.length; i++) {
        var values = metrics[i].values;
        $(".monthly_overview_table  .tbody").append(`
        <tr>
        </tr>
        `);
        var date_of_current_row = new Date(dateRange.startDate);
        $(".monthly_overview_table tr:last").append(`
          <td>${date_of_current_row.toLocaleDateString('de-DE', options)}</td>
        `);

        for (var inner_i = 0; inner_i < values.length; inner_i++) {
            $(".monthly_overview_table tr:last").append(`
              <td>${values[inner_i]}</td>
            `);
        }
      }

      current_step = current_step + 1;
      if (current_step < request.dateRanges.length) {
        montlyOverviewReport(request.dateRanges[current_step]);
      } else {
        current_step = 0;
        montlyMemberPageReport(request.dateRanges[current_step]);
      }

    })

  }

  function montlyMemberPageReport(dateRange) {
    gapi.client.request({
      path: '/v4/reports:batchGet',
      root: 'https://analyticsreporting.googleapis.com/',
      method: 'POST',
      body: {
        reportRequests: [
          {
            viewId: VIEW_ID,
            dateRanges: [dateRange],
            metrics: [
              {
                expression: 'ga:users'
              }
            ],
            "dimensionFilterClauses": [
             {
              "filters": [
              {
               "operator": "REGEXP",
               "dimensionName": "ga:pagePath",
               "expressions": [
                 "/mitglied-werden"
                ]
              }
              ]
             }
            ]

          }
        ]
      }
    }).then(function(response){

      var metrics = response.result.reports[0].data.rows[0].metrics;
      for (var i = 0; i < metrics.length; i++) {
        var values = metrics[i].values;
        $(".monthly_member_page_overview_table .tbody").append(`
        <tr>
        </tr>
        `);
        var date_of_current_row = new Date(dateRange.startDate);
        $(".monthly_member_page_overview_table tr:last").append(`
          <td>${date_of_current_row.toLocaleDateString('de-DE', options)}</td>
        `);

        for (var inner_i = 0; inner_i < values.length; inner_i++) {
            $(".monthly_member_page_overview_table tr:last").append(`
              <td>${values[inner_i]}</td>
            `);
        }
      }

      current_step = current_step + 1;
      if (current_step < request.dateRanges.length) {
        montlyMemberPageReport(request.dateRanges[current_step]);
      } else {
        current_step = 0;
        montlyDonationPageReport(request.dateRanges[current_step]);
      }

    })

  }

  function montlyDonationPageReport(dateRange) {
    gapi.client.request({
      path: '/v4/reports:batchGet',
      root: 'https://analyticsreporting.googleapis.com/',
      method: 'POST',
      body: {
        reportRequests: [
          {
            viewId: VIEW_ID,
            dateRanges: [dateRange],
            metrics: [
              {
                expression: 'ga:users'
              }
            ]
          //  "dimensionFilterClauses": [
          //   {
          //    "filters": [
          //    {
          //     "operator": "REGEXP",
          //     "dimensionName": "ga:pagePath",
          //     "expressions": [
          //       "/projekte/"
          //      ]
          //    }
          //    ]
          //   }
        //    ]

          }
        ]
      }
    }).then(function(response){

      var metrics = response.result.reports[0].data.rows[0].metrics;
      for (var i = 0; i < metrics.length; i++) {
        var values = metrics[i].values;
        $(".monthly_donation_page_overview_table  .tbody").append(`
        <tr>
        </tr>
        `);
        var date_of_current_row = new Date(dateRange.startDate);
        $(".monthly_donation_page_overview_table tr:last").append(`
          <td>${date_of_current_row.toLocaleDateString('de-DE', options)}</td>
        `);

        for (var inner_i = 0; inner_i < values.length; inner_i++) {
            $(".monthly_donation_page_overview_table tr:last").append(`
              <td>${values[inner_i]}</td>
            `);
        }
      }

      current_step = current_step + 1;
      if (current_step < request.dateRanges.length) {
        montlyDonationPageReport(request.dateRanges[current_step]);
      } else {
        //current_step = 0;
        //montlyMemberPageReport(request.dateRanges[current_step]);
      }

    })

  }

  function displayResults(response) {

    //var head_row_array = response.result.reports[0].columnHeader.metricHeader.metricHeaderEntries;

    //for (var i = 0; i < head_row_array.length; i++) {
    //    $(".head_tr").append(`
    //      <th scope="col">${head_row_array[i].name}</th>
    //    `);
    //}
    //var body_row_array = response.result.reports[0].data.rows[0].metrics[0].values;

    var metrics = response.result.reports[0].data.rows[0].metrics;
    for (var i = 0; i < metrics.length; i++) {
      var values = metrics[i].values;
      $(".monthly_member_page_overview_table .tbody").append(`
      <tr>
      </tr>
      `);

      for (var inner_i = 0; inner_i < values.length; inner_i++) {
          $(".monthly_member_page_overview_table tr:last").append(`
            <td>${values[inner_i]}</td>
          `);
      }

    }

    //var formattedJson = JSON.stringify(response.result, null, 2);
    //document.getElementById('query-output').value = formattedJson;

    current_step = current_step + 1;
    if (current_step < request.dateRanges.length) {
       montlyMemberPageReport(request.dateRanges[current_step]);
    }

  }
</script>

<!-- Load the JavaScript API client and Sign-in library. -->
<script src="https://apis.google.com/js/client:platform.js"></script>
