<div class="container-fluid text-center bg-b-color py-5">
  <h1>Spenden</h1>
</div>


<div class="container text-center">

  <div class="row mt-3">
    <div class="col-sm-12 col-md-6">
      <h2>Ellin braucht etwas zum Mampfen!</h2>
      <p>
        Tiere brauchen Futter und Medikamente.
      </p>
      <p>
        <strong>
          Hilf ihnen die Kosten für ein gutes Leben zu decken!
        </strong>
      </p>

    </div>
    <div class="col-sm-12 col-md-6">
        <%= image_tag "horse-eating.jpg", class: "img-fluid rounded" %>
    </div>
  </div>
</div>

<div class="container-fluid text-center">
  <div id="diagram">

  </div>
</div>

<script>


	data = [
    {
      name: "bereits erhalten",
      value: "200",
      color: "lightgreen"
    },
    {
      name: "noch benötigt",
      value: "100",
      color: "red"
    },
    {
      name: "total",
      value: "300",
      color: "steelblue"
    }
  ]


	drawTree('#diagram', data)

  $( window ).resize(function() {
    $("#diagram").empty();
    drawTree('#diagram', data)
    console.log("resize!");
  });

	function drawTree(container, data){

    margin = ({top: 30, right: 10, bottom: 30, left: 85})
    width = $( "#diagram" ).width();//500
    barHeight = 100
    height = Math.ceil((data.length + 0.1) * barHeight) + margin.top + margin.bottom
    fontSize = 18


  x = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.value)])
      .range([margin.left, width - 120])

    format = x.tickFormat(10, data.format)

  y = d3.scaleBand()
    .domain(d3.range(data.length))
    .rangeRound([margin.top, height - margin.bottom])
    .padding(0.1)

  xAxis = g => g
      .attr("transform", `translate(0,${margin.top})`)
      .call(d3.axisTop(x).ticks(width/(width/3)))
      .call(g => g.select(".domain").remove())
      .attr("font-size", fontSize);

  yAxis = g => g
      .attr("transform", `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).tickFormat(i => data[i].name).tickSizeOuter(0))
      .attr("font-size", fontSize)

	const svg = d3.select(container).append('svg')
	  .attr("viewBox", [-margin.left, -margin.top, width, height])
    .attr("preserveAspectRatio", "xMinYMin meet")
	  .style("font", "18px sans-serif")
	  .style("user-select", "none");


    svg.append("g")
      .selectAll("rect")
      .data(data)
      .join("rect")
        .attr("x", x(0))
        .attr("y", (d, i) => y(i))
        .attr("width", d => x(d.value) - x(0))
        .attr("fill", d => d.color)
        .attr("height", y.bandwidth());

    svg.append("g")
        .attr("fill", "white")
        .attr("text-anchor", "end")
        .attr("font-family", "sans-serif")
        .attr("font-size", fontSize)
      .selectAll("text")
      .data(data)
      .join("text")
        .attr("x", d => x(d.value))
        .attr("y", (d, i) => y(i) + y.bandwidth() / 2)
        .attr("dy", "0.35em")
        .attr("dx", -4)
        .text(d => format(d.value))
      .call(text => text.filter(d => x(d.value) - x(0) < 20) // short bars
        .attr("dx", +4)
        .attr("fill", "black")
        .attr("text-anchor", "start"));

    svg.append("g")
        .call(xAxis);

    svg.append("g")
        .call(yAxis);

    return svg.node();

	}

</script>
