<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.0/d3.min.js" integrity="sha512-jXsLjbg/Pr8F5U2evjFaEci7mImlUix865lbvnNmp5TzS86+VTTFVDz7FFTS6VHdhSn7UJ4tjZdvpp0GgT0fZA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://code.jquery.com/jquery-3.6.3.min.js" integrity="sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=" crossorigin="anonymous"></script>

<script type="module">
  import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"

  window.Stimulus = Application.start()

  var svg;
  var firstBox;
  var secondBox;
  var gameBackground;
  var flags;
  var playerIcon;
  var startBox;
  var trial;


  Stimulus.register("survival-game", class extends Controller {
    static values = {
      url: String,
      width: Number,
      startBox: Object,
      firstBox: Object,
      secondBox: Object,
      startText: String,
      playerIconUrl: String,
      standardWidthPercentage: Number,
      backgroundImageUrl: String,
      gameBackgroundHeight: Number,
      gameBackgroundWidth: Number,
      currentQuestionIndex: Number,
      questions: Array,
      numberIconsUrls: Array,
      flagCoordinates: Array,
      flagIconUrl: String,
      flagSize: Object,
      veganSurvivalGameLogoUrl: String,
      veganSurvivalGameLogoMaxHeight: Number,
      iconMaxHeight: Number,
      baseDivSize: Object

    }

    static targets = [ "name", "output", "game", "calculateHeightOf", "baseDiv"]

    connect() {

      this.baseDivSizeValue = {
        height: window.innerHeight,
        width: 0
      }

      this.veganSurvivalGameLogoUrlValue = "https://vegan.ch/wp-content/uploads/VGS_VSG_logo.svg";

      this.flagValue = {
        height: 50,
        width: 50
      };

      this.flagIconUrlValue = "https://vegan.ch/wp-content/uploads/VGS_VSG_milestone.png";

      this.flagCoordinatesValue = [
        {
          x: 8,
          y: 82
        },
        {
          x: 21,
          y: 86
        },
        {
          x: 32,
          y: 82
        },
        {
          x: 43,
          y: 74
        },
        {
          x: 55,
          y: 72
        },
        {
          x: 67,
          y: 59
        },
        {
          x: 79,
          y: 76
        },
        {
          x: 91,
          y: 83
        }
      ];

      this.numberIconsUrlsValue = [
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_01-1.svg",
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_02-1.svg",
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_03-1.svg",
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_04-1.svg",
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_05-1.svg",
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_06-1.svg",
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_07-1.svg",
        "https://vegan.ch/wp-content/uploads/VGS_VSG_frage_08-1.svg"
      ];

      this.playerIconUrlValue = "https://vegan.ch/wp-content/uploads/VGS_VSG_player.svg";

      this.backgroundImageUrlValue = "https://vegan.ch/wp-content/uploads/VGS_VSG_bg_kombiniert.svg";

      this.currentQuestionIndexValue = 0;

      this.questionsValue = [
        {
          question: "Du stellst deine Wanderausrüstung zusammen. Dabei fragst du dich: Welche Marke bietet wohl vegane Wanderschuhe an?",
          solution_index: 2,
          wrong_text: "Hmm… bist du dir sicher, dass du für eine Wanderung mit der Veganen Gesellschaft Schweiz gewappnet bist? Auf vegan.ch/blog findest du alle Informationen rund um den veganen Lebensstil.",
          last_question: "false",
          answers: [
            "Sherpa",
            "Mammut",
            "Lowa"
          ]
        },
        {
          question: "Die Wanderausrüstung ist ready, welche Snacks packst du in deinen Rucksack?",
          solution_index: 1,
          wrong_text: "Du schaust dir die Produkte etwas genauer an und merkst, dass Milch-Farmer, Hüttenkäse und Bio-Choco Cookies von der Migros leider nicht vegan sind. Und stellst dir vor, wie schön es wäre, wenn es die Bio-Choco Cookies von V-Love gäbe.",
          last_question: "false",
          answers: [
            "Milch Farmer, Brot, Hüttenkäse und Cherrytomaten",
            "Hummus, Brot, Blevitas und eine Packung Oreos",
            "Sojaaufstich, Brot, Blevitas, ein veganer Landjäger und die Bio-Choco Cookies von der Migros"
          ]
        },
        {
          question: "Yeah, alles ready, es kann losgehen. Am Bahnhof merkst du, dass du deine Sonnencreme zu Hause vergessen hast.. Zum Glück reicht die Zeit, um eine neue zu kaufen. Aber sind Sonnencremes immer vegan?",
          solution_index: 1,
          wrong_text: "Du fragst in der Apotheke nach und erfährst, dass es wichtig ist, einen Blick auf die Inhaltsstoffe zu werfen, da besonders bei der Herstellung von synthetischen Stoffen nicht-vegane Mittel zum Einsatz kommen können. Auch ist es wichtig, auf Labels wie Veganblume, Leaping Bunny oder PETA cruelty-free zu schauen, damit wirklich kein Tier für dieses Produkt leiden musste.",
          last_question: "false",
          answers: [
            "Na klar, was soll denn daran tierischen Ursprungs sein?",
            "Nein, nicht jede Sonnencreme ist automatisch vegan.",
            "Hää, reicht es nicht wenn ich auf tierische Produkte beim Essen verzichte?"
          ]
        },
        {
          question: "Geschafft! Auf geht's in die Berge. Das Wetter ist perfekt und die Natur strahlt in schönster Pracht. Du erfährst, dass es viele Pflanzen und Kräuter gibt, die geniessbar sind. Aber welche Pflanze ist denn nun essbar?",
          solution_index: 0,
          wrong_text: "Die Sonne, die seit Stunden auf deinen Kopf scheint, macht dich langsam, aber sicher etwas schwammig im Schädel. Du siehst all die schönen Pflanzen, hörst nur «essbar» und greifst zu, gönnst dir einen guten Bissen, schluckst ihn herunter und starrst in schockierte Gesichter. Bevor deine Augen zufallen, siehst du wie in der Ferne ein Rega-Helikopter in eure Richtung fliegt und hoffst, dass sie dich noch rechtzeitig abholen.",
          last_question: "false",
          answers: [
            "Rotklee",
            "Eibe",
            "Bilsenkraut"
          ]
        },
        {
          question: "Eine Handvoll Rotklee packst du für später ein, damit kannst du leckeres Knäckebrot backen, wie dir erzählt wurde. Ihr geht den Weg weiter und kommt in den Wald, links und rechts vom Pfad seht ihr viele Pilze, die ihren Weg an die Oberfläche gefunden haben. Doch welchen dieser Pilze könntest du essen?",
          solution_index: 2,
          wrong_text: "So schöne Farben hast du selten bei Pilzen gesehen. Von der Sonne schon leicht vernebelt  im Kopf, läufst du schnurstracks auf die bunten Pilze zu, schneidest einen ab und beisst hinein. «Hmm.. etwas komisch schmeckt er schon.», denkst du dir, schluckst den Mundinhalt dennoch hinunter und läufst mit dem abgebissenen Pilz zurück zu den anderen. «Hast du nicht zugehört? Dieser Pilz ist giftig!» Du merkst, wie sich alles anfängt zu drehen und kippst im Stehen zusammen.",
          last_question: "false",
          answers: [
            "Fliegenpilz",
            "Grüner Knollenblätterpilz",
            "Kräuterseitling"
          ]
        },
        {
          question: "Uff, bei so vielen neuen Infos knurrt der Magen. Der Proviant wird ausgepackt und ein riesiges Buffet zusammengestellt.  Alle greifen zu und schlagen sich den Bauch voll. Dabei fragst du dich: Was enthält viel Protein?",
          solution_index: 1,
          wrong_text: "Sorry, aber Süssigkeiten und Snacks sind wirklich nicht die beste Wahl, wenn es um proteinreiches Essen geht.",
          last_question: "false",
          answers: [
            "Oreos, Gummibärli und Manner Waffeln",
            "Nüsse, Kichererbsen und Vollkornbrot",
            "Chips, Salzstängeli und Zwieback"
          ]
        },
        {
          question: "Gestärkt geht's weiter, ihr kommt an einem Berg-Restaurant vorbei – Zeit für eine Abkühlung. Ihr schaut euch die Glacékarte an. Welches Glacé ist vegan?",
          solution_index: 0,
          wrong_text: "Einen ganzen Tag bist du schon mit der Veganen Gesellschaft Schweiz unterwegs und doch gibt es noch viel zu lernen. WASSERGLACÉ! Greif zum WASSERGLACÉ...",
          last_question: "true",
          answers: [
            "Rakete",
            "Cournet",
            "Maxibon"
          ]
        }
      ];


      setTimeout(() => {
        //this.initiateGame();
        this.setSvg()
        .then(() => {


        trial
        .append("foreignObject")
        .attr('x', 0)
        .attr('y', 0)
        .attr('width', this.widthValue)
        .attr('height', 800)
        .append("xhtml:div")
        .html(
        `
        <div class="card text-white text-center py-2" style="background-color: #415C66;">
          <div class="row g-0">
            <div class="col-md-12">
              <div class="card-body">
                <img src="${this.veganSurvivalGameLogoUrlValue}" class="img-fluid rounded-start mb-3" style="max-height: ${self.veganSurvivalGameLogoMaxHeightValue}px;">
                <br>
                ${this.startTextValue}
                <hr>
                <p>Test</p>
              </div>
            </div>
          </div>
        </div>
        `
        );

        ;

        });

        trial
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .transition()
        .duration(1000)
        .style("opacity", 1);


      }, 2000);


    }

    initiateGame(){
      this.setSvg()
      .then(() => this.setGameBackground())
      .then(() => this.setFirstBox())
      .then(() => this.setSecondBox())
      //.then(() => this.startBoxHtml({content: this.startTextValue, imageUrl: this.veganSurvivalGameLogoUrlValue}))
      //.then((start_box_html) => this.fillFirstBox(
      //{
      //  html: start_box_html,
      //  imageUrl: this.veganSurvivalGameLogoUrlValue
      //}
      //))
      .then(() => this.mainBoxHtml({content: this.startTextValue, imageUrl: this.veganSurvivalGameLogoUrlValue}))
      .then((main_box_html) => this.fillFirstBox(
      {
        html: main_box_html,
        imageUrl: this.playerIconUrlValue
      }
      ))
      .then(() => this.startButtonHtml())
      .then((start_button_html) => this.fillSecondBox(
      {
        html: start_button_html,
        imageUrl: ""
      }
      ))
      .then(() => this.appendImageToGameBackground())
      .then(() => this.moveGameBackground())
      .then(() => this.setPlayerIcon())
      .then(() => this.appendPlayerIconToGameBackground());
    }

    //svg setters
    setSvg(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        self.widthValue = self.gameTarget.offsetWidth;

        if(self.gameTarget.offsetWidth < 768){

          self.standardWidthPercentageValue = 98;
          self.iconMaxHeightValue = 50;
          self.veganSurvivalGameLogoMaxHeightValue = 85;
          self.baseDivTarget.style.fontSize = "small";

        } else if (self.gameTarget.offsetWidth < 992) {

          self.standardWidthPercentageValue = 75;
          self.iconMaxHeightValue = 75;
          self.veganSurvivalGameLogoMaxHeightValue = 125;
          //self.baseDivTarget.style.fontSize = "small";


        } else {

          self.standardWidthPercentageValue = 50;
          self.iconMaxHeightValue = 100;
          self.veganSurvivalGameLogoMaxHeightValue = 150;

        }



        svg = d3.select("#game")
          .append("svg")
          .attr("width", self.widthValue)
          .attr("height", self.baseDivSizeValue.height)
          .append("g")
          .attr("transform", `translate(${0}, ${0})`);

        trial = svg.append("g");


          final_resolve(svg);

      })
    }

    setStartBox(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        startBox = svg.append("g");

        final_resolve(startBox);

      })
    }

    setFirstBox(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        firstBox = svg.append("g");

        final_resolve(firstBox);

      })
    }

    setSecondBox(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        secondBox = svg.append("g");

        final_resolve(secondBox);

      })
    }

    setGameBackground(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        gameBackground = svg.append("g");

        final_resolve(gameBackground);

      })
    }

    setFlags(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        flags = gameBackground.append("g");

        final_resolve(gameBackground);

      })
    }

    setPlayerIcon(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        playerIcon = gameBackground.append("g")
        .attr("transform", `translate(${(self.gameBackgroundWidthValue / 100) * self.flagCoordinatesValue[self.currentQuestionIndexValue].x}, ${((self.gameBackgroundHeightValue / 100) * self.flagCoordinatesValue[self.currentQuestionIndexValue].y) - (self.flagValue.height * 1.5) })`)
      //  .attr("transform", `translate(${self.gameBackgroundWidthValue/10}, ${self.gameBackgroundHeightValue/5})`)
        .style("opacity", 0);

        final_resolve(playerIcon);

      })
    }

    appendImageToGameBackground(){

      var self = this;

      return new Promise(function(final_resolve, final_reject){
        //self.gameBackgroundWidthValue = (self.widthValue/100) * self.standardWidthPercentageValue;
        self.gameBackgroundWidthValue = (self.widthValue/100) * 98;

        self.gameBackgroundHeightValue = self.gameBackgroundWidthValue * 0.56585754078;

        gameBackground.append("svg:image")
          //.attr("transform", `translate(${0}, ${self.firstBoxValue.height + self.secondBoxValue.height})`)
          .attr('width', self.gameBackgroundWidthValue)
          .attr('id', "survival_game_background_image")
          .attr('height', self.gameBackgroundHeightValue)
          .style("opacity", 1)
          .attr("xlink:href", "https://vegan.ch/wp-content/uploads/VGS_VSG_bg_kombiniert.svg");

          final_resolve(gameBackground);

      })

    }

    appendPlayerIconToGameBackground(){

      var self = this;

      return new Promise(function(final_resolve, final_reject){

        var player_icon_width = (self.gameBackgroundWidthValue / 100) * 15;

        playerIcon
        .append("svg:image")
        .attr("transform", `translate(${-player_icon_width/2}, ${-player_icon_width/2})`)
        //.attr("transform", `translate(${0}, ${0})`)
        //.attr('x', (self.widthValue / 100) * self.flagCoordinatesValue[0].x + 12)
        //.attr('y', (self.heightValue/100) * self.flagCoordinatesValue[0].y + 100)
        .attr('width', player_icon_width)
        //.attr('height', this.heightValue)
        .style("cursor", "pointer")
        .attr("xlink:href", self.playerIconUrlValue);

        final_resolve(playerIcon);
      })
    }

    makePlayerIconVisible(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        playerIcon
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .on("end", function(){
          final_resolve(playerIcon);
        });
      })
    }

    movePlayerIcon(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){


        playerIcon
        .transition()
        .duration(1500)
        .attr("transform", `translate(${(self.gameBackgroundWidthValue / 100) * self.flagCoordinatesValue[self.currentQuestionIndexValue].x}, ${((self.gameBackgroundHeightValue / 100) * self.flagCoordinatesValue[self.currentQuestionIndexValue].y) - (self.flag.height * 1.5) })`)
        .on("end", final_resolve(playerIcon));

        //.attr("transform", `translate(${(self.widthValue / 100) * self.flagCoordinatesValue[self.currentQuestionIndexValue].x}, ${(self.backgroundImageHeightValue/ 100) * self.flagCoordinatesValue[self.currentQuestionIndexValue].y})`);

      })
    }

    appendFlagsToGameBackground(){

      var self = this;

      return new Promise(function(final_resolve, final_reject){

        for (let i = 0; i < self.flagCoordinatesValue.length; i++) {

        var flagWidth = (self.gameBackgroundWidthValue / 100) * 8;
        var flagHeight = flagWidth;

        self.flag = {
          width: flagWidth,
          height: flagHeight
        }

        setTimeout(() => {

          var single_flag = flags
              .append('g')
              .attr("transform", `translate(${(self.gameBackgroundWidthValue / 100) * self.flagCoordinatesValue[i].x}, ${(self.gameBackgroundHeightValue / 100) * self.flagCoordinatesValue[i].y})`)
              //.attr("transform", `translate(${(self.gameBackgroundWidthValue / 100) * self.flagCoordinatesValue[i].x}, ${(self.gameBackgroundHeightValue / 100) * self.flagCoordinatesValue[i].y})`)
              .append("svg:image")
              .attr("transform", `translate(${-(flagWidth * 0.48)}, ${-flagHeight * 0.73})`)
              //.attr('x', (self.widthValue / 100) * self.flagCoordinatesValue[0].x + 12)
              //.attr('y', (self.heightValue/100) * self.flagCoordinatesValue[0].y + 100)
              .attr('width', flagWidth)
              .attr('height', flagHeight)
              //.attr('height', this.heightValue)
              .style("cursor", "pointer")
              .style("opacity", 0)
              .attr("xlink:href", self.flagIconUrlValue);

          single_flag
          .transition()
          .duration(1000)
          .style("opacity", 1)

          }, i * 100);



        }

          final_resolve(flags);

      })

    }

    moveGameBackground(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        var y_coordinate = (self.firstBoxValue.height + self.secondBoxValue.height) - (self.gameBackgroundHeightValue/3.333333);

        if(y_coordinate < 0){
          y_coordinate = 0;
        }

        gameBackground
        .transition()
        .duration(1000)
        .attr("transform", `translate(${0}, ${y_coordinate})`);

        final_resolve(gameBackground);
      })

    }


    startGame(){

      var self = this;

      return new Promise(function(final_resolve, final_reject){

        //startBox.remove();
        //self.makeInvisible(startBox);
        self.makeInvisible(secondBox)
        //self.makeInvisible(secondBox)
        .then(() => self.makeInvisible(firstBox))
        .then(() => self.makePlayerIconVisible())
        .then(() => self.setFlags())
        .then(() => self.appendFlagsToGameBackground())
        .then(() => self.goToNextQuestion())
        .then(() => final_resolve(""));

      })
    }


    restartGame(){

      var self = this;

      return new Promise(function(final_resolve, final_reject){

        d3.select("svg").remove();
        self.currentQuestionIndexValue = 0;

        self.initiateGame();

      })
    }

    goToNextQuestion(){

      var self = this;

      return new Promise(function(final_resolve, final_reject){

        //self.makeInvisible(firstBox);

        self.makeInvisible(secondBox)
        .then(() => self.makeInvisible(firstBox))
        .then(() => self.mainBoxHtml({content: self.questionsValue[self.currentQuestionIndexValue].question, imageUrl: self.numberIconsUrlsValue[self.currentQuestionIndexValue]}))
        .then((main_box_html) => self.fillFirstBox(
        {
          html: main_box_html,
          imageUrl: self.playerIconUrlValue
        }
        ))
        .then(() => self.answersHtml())
        .then((answers_html) => self.fillSecondBox(
        {
          html: answers_html,
          imageUrl: ""
        }
        ))
        .then(() => self.movePlayerIcon())
        .then(() => self.moveGameBackground())
        .then(() => self.makeVisible(firstBox))
        .then(() => self.makeVisible(secondBox))
        .then(() => final_resolve(""))
      })
    }


    //svg fillers
    fillFirstBox(parameters){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        self.boxDataGatherer(parameters)
        .then((data) => {

          self.firstBoxValue = {
            html: data.html,
            height: data.height,
            imageUrl: data.imageUrl
          }

          d3.selectAll(firstBox._groups[0][0].childNodes).remove();

          var width_of_box = (self.widthValue/100) * self.standardWidthPercentageValue;

          firstBox.append("foreignObject")
          //firstBox is at the top
          .attr('x', (self.widthValue - width_of_box)/2)
          .attr('y', 0)
          .attr('width', width_of_box)
          .attr('height', data.height)
          .append("xhtml:div")
          .html(data.html);

          final_resolve(firstBox);

        });

      })
    }

    fillStartBox(parameters){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        self.boxDataGatherer(parameters)
        .then((data) => {

          self.startBoxValue = {
            html: data.html,
            height: data.height,
            imageUrl: data.imageUrl
          }

          //hotfix
          self.firstBoxValue = {
            //html: data.html,
            height: data.height,
            //imageUrl: data.imageUrl
          }

          d3.selectAll(startBox._groups[0][0].childNodes).remove();

          var width_of_box = (self.widthValue/100) * self.standardWidthPercentageValue;

          startBox.append("foreignObject")
          //firstBox is at the top
          .attr('x', (self.widthValue - width_of_box)/2)
          .attr('y', 0)
          .attr('width', width_of_box)
          .attr('height', data.height)
          .append("xhtml:div")
          .html(data.html);

          final_resolve(startBox);

        });

      })
    }

    fillSecondBox(parameters){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        self.boxDataGatherer(parameters)
        .then((data) => {

          d3.selectAll(secondBox._groups[0][0].childNodes).remove();

          var width_of_box = (self.widthValue/100) * self.standardWidthPercentageValue;

          self.secondBoxValue = {
            html: data.html,
            height: data.height,
            imageUrl: data.imageUrl
          }

          secondBox.append("foreignObject")
          .attr('x', (self.widthValue - width_of_box)/2)
          .attr('y', self.firstBoxValue.height)
          .attr('width', width_of_box)
          .attr('height', data.height)
          .append("xhtml:div")
          .html(data.html);

          final_resolve(secondBox);

        });

      })
    }

    checkAnswer(event){

      if(this.questionsValue[this.currentQuestionIndexValue].solution_index == event.params.index){
        if(this.questionsValue[this.currentQuestionIndexValue].last_question == "true"){

          this.currentQuestionIndexValue = this.currentQuestionIndexValue + 1;
          this.win();

        } else {
          this.currentQuestionIndexValue = this.currentQuestionIndexValue + 1;
          this.goToNextQuestion()
        }

      } else {
        this.death();
      }
    }




    //helpers
    boxDataGatherer(parameters){

      var self = this;

      return new Promise(function(final_resolve, final_reject){

        self.calculateHeightOf(parameters.html)
        .then((calculated_height) => {
              final_resolve({height: calculated_height, html: parameters.html})
        })


      })

    }

    calculateHeightOf(html){

      var self = this;

      return new Promise(function(final_resolve, final_reject){

        self.calculateHeightOfTarget.innerHTML = html;
        self.calculateHeightOfTarget.style.width = self.standardWidthPercentageValue + "%";

        setTimeout(() => {
            //final_resolve(self.calculateHeightOfTarget.getBoundingClientRect().height)
            final_resolve(self.calculateHeightOfTarget.offsetHeight + 10)
          }, 400);

      })
    }

    makeVisible(object){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        object
        .transition()
        .duration(1000)
        .style("opacity", 1)
        .on("end", function(){
          final_resolve(object);
        });
      })
    }

    makeInvisible(object){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        object
        .transition()
        .duration(1000)
        .style("opacity", 0)
        .on("end", function(){
          final_resolve(object);
        });
      })
    }

    //html-getters

    startBoxHtml(parameters){
      var self = this;

      return new Promise(function(final_resolve, final_reject){
        var html = `
        <div class="card text-white text-center py-2" style="background-color: #415C66;">
          <div class="row g-0">
            <div class="col-md-12">
              <div class="card-body">
                <img src="${self.veganSurvivalGameLogoUrlValue}" class="img-fluid rounded-start mb-3" style="max-height: ${self.veganSurvivalGameLogoMaxHeightValue}px;">
                <br>
                ${self.startTextValue}
              </div>
            </div>
          </div>
        </div>
        `;

        final_resolve(html);
      })

    }


    mainBoxHtml(parameters){
      var self = this;

      return new Promise(function(final_resolve, final_reject){
        var html = `
        <div class="card text-white py-2" style="background-color: #415C66;">
          <div class="row g-0">
            <div class="col-md-2 text-center">
              <img src="${parameters["imageUrl"]}" class="img-fluid rounded-start" style="max-height: ${self.iconMaxHeightValue}px;">
            </div>
            <div class="col-md-10">
              <div class="card-body">
                ${parameters.content}
              </div>
            </div>
          </div>
        </div>
        `;

        final_resolve(html);
      })

    }

  win(){

      var self = this;

      return new Promise(function(final_resolve, final_reject){
        self.makeInvisible(firstBox);
        self.makeInvisible(secondBox)
        .then(() => self.movePlayerIcon())

        .then(() => self.winBoxHtml({content: `<h3 style="color: #63C3D1">HERZLICHE GRATULATION</h3><h1 style="color: #63C3D1">Du hast es geschafft!</h1>`, imageUrl: ""}))
        .then((win_box_html) =>self.fillFirstBox(
        {
          html: win_box_html,
          imageUrl: ""
        }
        ))
        //.then(() => self.answersHtml())
        .then(() => self.fillSecondBox(
        {
          html: "",
          imageUrl: ""
        }
        ))
        .then(() => self.moveGameBackground())
        .then(() => self.makeVisible(firstBox))
        .then(() => self.makeVisible(secondBox))
        .then(() => final_resolve(""))
        .finally(() => {
          gtag('event', 'survival_game_finished', {
            'screen_name': 'homepage'
          });
        })
      })
    }

    death(){

        var self = this;

        return new Promise(function(final_resolve, final_reject){


          self.dropFlags();
          self.dropPlayerIcon();
          self.makeInvisible(firstBox);
          self.makeInvisible(secondBox)
          .then(() => self.deathBoxHtml({content: self.questionsValue[self.currentQuestionIndexValue].wrong_text, imageUrl: ""}))
          .then((death_box_html) =>self.fillFirstBox(
          {
            html: death_box_html,
            imageUrl: ""
          }
          ))
          .then(() => self.restartButtonHtml())
          .then((restart_button_html) => self.fillSecondBox(
          {
            html: restart_button_html,
            imageUrl: ""
          }
          ))
          .then(() => self.moveGameBackground())
          .then(() => self.makeVisible(firstBox))
          .then(() => self.makeVisible(secondBox))
          //.then(() => self.movePlayerIcon())
          .then(() => final_resolve(""))
        })
      }

      dropFlags(){

        var self = this;

        return new Promise(function(final_resolve, final_reject){

        d3.selectAll(flags._groups[0][0].childNodes)
          .each(function (p, i) {

            d3.select(this)
            .transition()
            .duration(1500)
            .attr("transform", function(d) {
              //return `translate(${(self.gameBackgroundWidth / 100) * self.flagCoordinatesValue[i].x}, 2000)`
              return `translate(${(self.widthValue / 100) * self.flagCoordinatesValue[i].x}, 2000)`

            })
          });

          final_resolve("");
        })

      }

      dropPlayerIcon(){
        var self = this;

        return new Promise(function(final_resolve, final_reject){
          playerIcon.transition()
          .duration(1500)
          .attr("transform", `translate(${(self.widthValue / 100) * self.flagCoordinatesValue[self.currentQuestionIndexValue].x}, ${2000})`);

          final_resolve("");
        })

      }

    deathBoxHtml(parameters){
      var self = this;

      return new Promise(function(final_resolve, final_reject){
        var html = `
        <div class="card text-white py-2" style="background-color: #F6A201;">
          <div class="row g-0">
            <div class="col-md-2 text-center">
              <img src="https://vegan.ch/wp-content/uploads/skull-and-bones.svg" class="img-fluid rounded-start" style="max-height: 100px;">
            </div>
            <div class="col-md-10">
              <div class="card-body">
                ${parameters.content}
              </div>
            </div>
          </div>
        </div>
        `;

        final_resolve(html);
      })

    }

    winBoxHtml(parameters){
      var self = this;

      return new Promise(function(final_resolve, final_reject){
        var html = `
        <div class="card text-white text-center py-2" style="background-color: #FFFFFF;">

              <div class="card-body">
                ${parameters.content}
                <p>
                  <img src="https://vegan.ch/wp-content/uploads/VGS_VSG_icon_geschafft.png" class="img-fluid rounded-start" style="max-height: 100px;">

                </p>
                <hr>

                <p>
                  <a class="" href="https://veganuary.com/de-ch/partner/vegan-ch/">Mehr Tipps gibt es im Veganuary!</a>
                </p>
                <img src="https://vegan.ch/wp-content/uploads/veganuary-logo-vector-cut.png" class="img-fluid rounded-start" style="max-height: 100px;">


          </div>
        </div>
        `;

        final_resolve(html);
      })

    }

    startButtonHtml(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){
        var html = `
        <div class="p-4 text-center" style="" data-action="click->survival-game#startGame">

          <button type="button" class="btn-lg" style="background-color: #F6A201; font-size: 1.5rem;">Spiel starten</button>

        </div>
        `;

        final_resolve(html);
      })

    }

    restartButtonHtml(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){
        var html = `
        <div class="p-4" style="background-color: #FFFFFF; border-radius: 50px; cursor: pointer" data-action="click->survival-game#restartGame">
          <table>
            <tr>
              <td style="width: 35px;">
                <div style="border-radius: 50%;
                height: 25px;
                width: 25px;
                background: transparent;
                border: 2px solid #63C3D1;">
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                </div>
              </td>
              <td style="padding-left: 15px;">Erneut versuchen</td>
            </tr>
          </table>
        </div>
        `;

        final_resolve(html);
      })

    }

    answersHtml(){
      var self = this;

      return new Promise(function(final_resolve, final_reject){

        var answers_string = "";

        for (let i = 0; i < self.questionsValue[self.currentQuestionIndexValue].answers.length; i++) {
          answers_string +=
          `
          <div class="p-2 mb-2" style="background-color: #FFFFFF; border-radius: 50px; cursor: pointer" data-action="click->survival-game#checkAnswer" data-survival-game-index-param="${i}">
            <table>
              <tr>
                <td style="width: 35px; background: transparent; vertical-align: center !important;">
                  <div style="padding-left:5px;
                  border-radius: 50%;
                  height: 25px;
                  width: 25px;
                  background: transparent;
                  border: 2px solid #63C3D1;">
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                  </div>
                </td>
                <td style="padding-left: 15px;">${self.questionsValue[self.currentQuestionIndexValue].answers[i]}</td>
              </tr>
            </table>
          </div>
          `;
        }

        final_resolve(answers_string);

      })
    }


  })
</script>

  <div data-controller="survival-game"
    data-survival-game-margin-value="{}"
    data-survival-game-start-text-value="<p><strong>Hey du, heute gehen wir gemeinsam wandern.</strong><br> Da du heute mit der Veganen Gesellschaft Schweiz unterwegs bist, stehen rein pflanzliche Lebensmittel auf dem Speiseplan. Pack einen Block und Stift ein, denn du wirst bestimmt neue Infos rund um den veganen Lebensstil erfahren.</p>"
    class="container-fluid" style="background-color: #63C3D1;"
    data-survival-game-target="baseDiv"
  >

    <span data-survival-game-target="output">
    </span>

    <div data-survival-game-target="game" id="game">

    </div>

    <!--
      <div data-survival-game-target="calculateHeightOf" style="visibility: hidden;">
    -->
    <div data-survival-game-target="calculateHeightOf">

    </div>


  </div>
