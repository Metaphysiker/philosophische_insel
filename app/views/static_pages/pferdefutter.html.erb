<div class="container">
  <div class="h-100 p-5 my-4 bg-light border rounded-3">
    <h1>Pferdefutter</h1>
    <p>
      Manfred braucht etwas zum Mampfen!
    </p>
    <p>
      300 Säcke pro Jahr
    </p>
    <p>
      24 Euro pro Sack
    </p>
    <p>
      25 Säcke pro Monat
    </p>
    <p>
      Ich möchte eine Patenschaft für Manfred übernehmen und seine Futterkosten decken.
    </p>
    <p>
      Animation pro Monat  Sack
    </p>
    <p>
      Es fehlen noch:
      <br />
      15 tolle Menschen haben uns schon einen Sack gespendet!
    </p>
    <button class="btn btn-outline-secondary" type="button">Example button</button>
  </div>
  <div id="diagram">

  </div>
</div>

<div class="container text-center py-3">
  <div class="rnw-widget-container"></div>
  <script src="https://tamaro.raisenow.com/stift-16e8/latest/widget.js"></script>
</div>

<script>

  //variables and constants
  const donation_project = <%= raw DonationProject.find_by_title("Pferdefutter").into_json %>;
  var chart_seen = false;
  var cachedWidth = $(window).width();
  var amount_needed_total = parseFloat(donation_project.amount_needed_total);
  var amount_already_received = parseFloat(donation_project.amount_already_received);

  //raiseNow runWidghet
  window.rnw.tamaro.runWidget('.rnw-widget-container', {
    testMode: <%= Rails.env.development? %>,
    translations: {
      de: {
        patenschaft: "Ich möchte eine Patenschaft übernehmen",
        amount_descriptions: [
        {
          "if": "paymentType() == onetime",
          "then": [
            {
              "if": "amount() == 25",
              "then": "1 Futtersack"
            },
            {
              "if": "amount() == 50",
              "then": "2 Futtersäcke"
            },
            {
              "if": "amount() == 75",
              "then": "3 Futtersäcke"
            }
          ]
        }
        ]
      }
    },
    debug: false,
    slots: {
      profile_form_end: [{
        component: "field",
        type: "checkbox",
        name: "patenschaft",
        text: "patenschaft",
      },
    ]},
    language: 'de',
    showStoredCustomerSalutation: false,
    purpose: "Pferdefutter",
    showStoredCustomerStreetNumber: false,
    showStoredCustomerStreet2: false,
    countries: ["Schweiz", "Deutschland", "Österreich"],
    paymentFormPrefill: {
      stored_customer_country: "Schweiz"
    },
    paymentTypes: ["onetime"],
    amounts: [
      {
        "if": "paymentType() == onetime",
        "then": [25,50,75],
      }
    ]
  });

  //raiseNow payment complete
  window.rnw.tamaro.events["paymentComplete"].subscribe(function(event) {
    //console.log("payment complete");

     var amount_just_paid = event.data.api.transactionInfo.amount;
     //console.log(amount_just_paid);
     var transaction_id = event.data.api.transactionInfo.epp_transaction_id;

    $.ajax({
      url: "<%= donations_path %>",
      method: 'post',
      data: { donation:
        {
          amount: amount_just_paid,
          transaction_id: transaction_id,
          donation_project_id: donation_project.id
        }
      },
      headers: {
        'X-CSRF-Token': document.querySelector("meta[name=csrf-token]").content
      }
    }).always(function( ) {
      //console.log("after creating donation")
      //drawBarChart();
      	draw('#diagram', data);
    });

  });

  const data =  {
    "nodes": [
      {
        "node_id": 1,
        "month_name": "Januar",
        "got_text": "15 erhalten",
        "needed_text": "10 noch nötig",
        "x": 0,
        "y": 0,
      },
      {
        "node_id": 2,
        "month_name": "Februar",
        "x": 0,
        "y": 1,
      }
    ],
    "links": [
      {"source": 1, "target": 2}
    ]
  }

  var width = $("#diagram").width();
  var height = 500;
  var x_distance_between_nodes = width/4;
  var y_distance_between_nodes = 150;
  var margin = ({top: 20, right: 10, bottom: 10, left: 10});
  var circle_radius = 15;


	draw('#diagram', data);

	function draw(container, data){


    const svg = d3.select(container).append('svg')
    //.attr("viewBox", [-margin.left, -margin.top, width, height])
      .attr("width", width)
      .attr("height", height);
    //.style("overflow", "scroll");

    const gNode = svg.append("g")
      .attr("font-family", "sans-serif")
      .attr("transform", `translate(${width/2},${margin.top})`);

      // nodes with circles
      const node = gNode.selectAll("g")
         .data(data.nodes);
         //.enter();
      const nodeEnter = node.enter().append("g")
      .attr("transform", d => `translate(${d.x * x_distance_between_nodes},${d.y * y_distance_between_nodes})`)
      .attr("x",  d => `${d.x * x_distance_between_nodes}`)
      .attr("y",  d => `${d.y * y_distance_between_nodes}`)
      .attr("node_id", d => d.node_id);

      nodeEnter
      .append("circle")
      .style("stroke", "gray")
      .style("fill", "gray")
      .attr("r", circle_radius);

      nodeEnter
      .append("circle")
      .style("stroke", "gray")
      .style("fill", "gray")
      .attr("r", 15);

          nodeEnter.append("foreignObject")
          .attr("y", -20)
          .attr("x", 50)
          .attr("width", 300)
          .attr("height", 200)
          .append("xhtml:div")
          .html(function(d) {
            return `
              <div class="rounded">
                  <h1>
                    ${d.month_name}
                  </h1>
                  <p class="text-success">
                    ${d.got_text} <i class="bi bi-check-lg"></i>
                  </p>
                  <p class="text-primary">
                    ${d.needed_text}
                  </p>
              </div>
            `
          })

      //links
      const link = gNode.append("g")
      .attr("fill", "none")
      .attr("stroke", "black")
      .attr("stroke-opacity", 0.0)
      .attr("stroke-width", 2)
      .selectAll("path")
        .data(data.links)
        .join("path")
          .attr("d", d => arrowTo({x: d3.select(`[node_id='${d.source}']`).attr("x")/1, y: d3.select(`[node_id='${d.source}']`).attr("y")/1}, {x: d3.select(`[node_id='${d.target}']`).attr("x")/1, y: d3.select(`[node_id='${d.target}']`).attr("y")/1}, 0))
          .transition()
          .duration(3000)
          .style("stroke-opacity", 1.0)
          .delay(function(d,i){return(i*200)});


      return svg.node();
	}

  function arrowTo(source, target, box_size) {

     var y0 = source.y;
     var x0 = source.x;
     var x1 = target.x;
     var y1 = target.y;

     var padding1 = 10;
     var padding2 = 20;

     var arrow = generateArrow(x0, y0, x1, y1, 10, padding1, padding2);

     return arrow.toString();
    }

    function generateArrow(x1, y1, x2, y2, flangeSize, padding1, padding2) {
      const dx = x2 - x1;
      const dy = y2 - y1;
      const length = Math.sqrt(dx * dx + dy * dy);
      //Hypotenuse

      let multiplier1 = padding1 / length;
      const dx1 = dx * multiplier1;
      const dy1 = dy * multiplier1;


      let multiplier2 = padding2 / length;
      const dx2 = dx * multiplier2;
      const dy2 = dy * multiplier2;

      var px = y1 - y2;
      var py = x2 - x1;
      let plength = Math.sqrt(px * px + py * py);
      let pmultiplier = flangeSize / plength;

      const px1 = px * pmultiplier;
      const py1 = py * pmultiplier;

      const sx = dx * pmultiplier;
      const sy = dy * pmultiplier;

      const a1 = x1 + dx1;
      const b1 = y1 + dy1;
      const a2 = x2 - dx2;
      const b2 = y2 - dy2;

      console.log(a1);
      console.log(b1);
      console.log(a2);
      console.log(b2);

      console.log("second m");
      console.log(a2 + px1 - sx);
      console.log(b2 + py1 - sy);

      return `
        M${a1}, ${b1}
        L${a2}, ${b2}
        M${a2 + px1 - sx}, ${b2 + py1 - sy}
        L${a2}, ${b2}
        L${a2 - px1 - sx}, ${b2 - py1 -sy}
      `;
    }

</script>
