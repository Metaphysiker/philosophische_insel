{"version":3,"sources":["webpack:///./app/javascript/packs/vegan_cockpit.js"],"names":["MonthlyReview","container_class","dateRanges","view_id","this","table_name","svg_container","date_format_options","year","month","generate_report","dateRange","Promise","outer_promise_resolve","outer_promise_reject","data","$","empty","append","main_index","p","then","resolve","reject","gapi","client","request","path","root","method","body","reportRequests","viewId","metrics","expression","response","result","reports","rows","i","length","values","date_of_current_row","Date","startDate","toLocaleDateString","inner_i","push","name","value","d3Charts","VerticalBarChart","draw_chart","error","MonthlyMemberPageReview","registrations","value2","year_month","getFullYear","getMonth","slice","registration_get","get","VerticalBarChartGroupedTwo","MonthlyDonationPageReview","donations","donation_get","MonthlyMostVisitedPagesReview","table_name_with_index","data_for_chart","rows_index","dimensions","HorizontalBarChart","MonthlySinglePageReview","page_name","MonthlySourceForSinglePageReview","data_of_sources","result_hash","SourceForSinglePageReview","endDate","row_dimension","row_value","DonutChart","MonthlyRegexpPageReview","SourceForRegexpPageReview"],"mappings":"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","file":"js/vegan_cockpit-b49f988a1a91cb212f5a.chunk.js","sourcesContent":["export function MonthlyReview(container_class, dateRanges, view_id) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Übersicht</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:pageviews'\n                        },\n                        {\n                          expression: 'ga:uniquePageviews'\n                        },\n                        {\n                          expression: 'ga:sessions'\n                        },\n                        {\n                          expression: 'ga:users'\n                        }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = response.result.reports[0].data.rows[0].metrics;\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[3]});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart = new d3Charts.VerticalBarChart(\".\" + svg_container, data);\n                  vertical_bar_chart.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function MonthlyMemberPageReview(container_class, dateRanges, view_id, registrations) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.registrations = registrations,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var registrations = this.registrations;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Mitgliedseite-Übersicht</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n            <th scope=\"col\">Monat</th>\n            <th scope=\"col\">Users</th>\n            <th scope=\"col\">Neue Mitglieder</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           \"/mitglied-werden\"\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = response.result.reports[0].data.rows[0].metrics;\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  var value2 = 0;\n\n                  var year_month = \"registration-\" + date_of_current_row.getFullYear() + \"-\" + (\"0\" + (date_of_current_row.getMonth() + 1)).slice(-2);\n                  let registration_get = registrations.get(year_month);\n\n                  if(registration_get){\n                    value2 = registration_get;\n                  }\n\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${value2}</td>\n                  `);\n\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[0], value2: value2});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChartGroupedTwo(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function MonthlyDonationPageReview(container_class, dateRanges, view_id, donations) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.donations = donations,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var donations = this.donations;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Spendenseite-Übersicht</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n            <th scope=\"col\">Monat</th>\n            <th scope=\"col\">Users</th>\n            <th scope=\"col\">Spenden</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           \"/aktiv-werden/spenden\"\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = response.result.reports[0].data.rows[0].metrics;\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  var value2 = 0;\n\n                  var year_month = \"donation-\" + date_of_current_row.getFullYear() + \"-\" + (\"0\" + (date_of_current_row.getMonth() + 1)).slice(-2);\n                  let donation_get = donations.get(year_month);\n\n                  if(donation_get){\n                    value2 = donation_get;\n                  }\n\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${value2}</td>\n                  `);\n\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[0], value2: value2});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChartGroupedTwo(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\n\nexport function MonthlyMostVisitedPagesReview(container_class, dateRanges, view_id) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n\n      $(\".\" + container_class).empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      \"metrics\":\n                      [\n                        {\"expression\": \"ga:users\"},\n                      ],\n                      \"dimensions\":\n                      [\n                        {\"name\": \"ga:pagePath\"}\n                      ],\n                      \"orderBys\": [\n                        {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                      ]\n\n\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var table_name_with_index = table_name + \"_\" + main_index;\n\n                var date_of_current_row = new Date(dateRanges[main_index].startDate);\n\n                var rows = response.result.reports[0].data.rows;\n\n                var data_for_chart = [];\n\n                for (var rows_index = 0; rows_index < 11; rows_index++){\n                  data_for_chart.push({name: rows[rows_index].dimensions[0], value: rows[rows_index].metrics[0].values[0]});\n                }\n\n\n\n\n                $(\".\" + container_class).append(`\n                <h2>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</h2>\n                <table class=\"table ${table_name_with_index}\">\n                  <tbody class=\"tbody\">\n\n                  </tbody>\n                </table>\n                `);\n\n\n                for (var rows_index = 0; rows_index < 11; rows_index++){\n                  $(\".\" + table_name_with_index + \" .tbody\").append(`\n                  <tr>\n\n                  </tr>\n                  `);\n\n                  $(\".\" + table_name_with_index + \" tr:last\").append(`\n                    <td>${rows[rows_index].dimensions[0]}</td>\n                    <td>\n                      ${rows[rows_index].metrics[0].values[0]}\n                    </td>\n                  `);\n                }\n\n                $(\".\" + container_class).append(`\n                <div class=\"horizontal_bar_chart_name_${table_name_with_index}\">\n\n                </div>\n                `);\n\n                var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".horizontal_bar_chart_name_\" + table_name_with_index, data_for_chart);\n                horizontal_bar_chart.draw_chart();\n\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n\n  }\n}\n\nexport function MonthlySinglePageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Übersicht für \"${page_name}\"</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:pageviews'\n                        },\n                        {\n                          expression: 'ga:uniquePageviews'\n                        },\n                        {\n                          expression: 'ga:sessions'\n                        },\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"EXACT\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = [];\n                if(typeof response.result.reports[0].data.rows !== 'undefined'){\n                  metrics = response.result.reports[0].data.rows[0].metrics;\n                }\n\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[3]});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChart(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function MonthlySourceForSinglePageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Quellen-Übersicht für \"${page_name}\"</h2>\n\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      dimensions: [\n                        {\n                          name: \"ga:source\"\n                        }\n                      ],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"EXACT\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                     ],\n                     \"orderBys\": [\n                       {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                     ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n                var data_of_sources = [];\n                var rows = response.result.reports[0].data.rows;\n\n                for (var i = 0; i < 15; i++) {\n                  var result_hash = {\n                    name: rows[i].dimensions[0],\n                    value: rows[i].metrics[0].values[0]\n                  };\n                  data_of_sources.push(result_hash);\n                }\n\n                $(\".\" + container_class).append(`\n                  <div class=\"${container_class + \"_\" + \"svg_container_\" + main_index}\">\n\n                  </div>\n                  `);\n\n                  var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".\" + container_class + \"_\" + \"svg_container_\" + main_index, data_of_sources);\n                  horizontal_bar_chart.draw_chart();\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function SourceForSinglePageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Quellen-Übersicht für \"${page_name}\"</h2>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [{startDate: dateRanges[0].startDate, endDate: dateRanges[dateRanges.length -1].endDate }],\n                      dimensions: [\n                        {\n                          name: \"ga:source\"\n                        }\n                      ],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"EXACT\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                     ],\n                     \"orderBys\": [\n                       {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                     ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n                var data_of_sources = [];\n                var rows = [];\n                if(typeof response.result.reports[0].data.rows !== \"undefined\"){\n                  rows = response.result.reports[0].data.rows;\n                }\n\n                for (var i = 0; i < 15; i++) {\n                  var row_dimension = i;\n                  if((typeof rows[i] !== \"undefined\") && (typeof rows[i].dimensions[0] !== \"undefined\")){\n                    row_dimension = rows[i].dimensions[0];\n                  }\n\n                  var row_value = 0;\n                  if((typeof rows[i] !== \"undefined\") && (typeof rows[i].metrics[0].values[0] !== \"undefined\")){\n                    row_value = rows[i].metrics[0].values[0];\n                  }\n\n                  var result_hash = {\n                    name: row_dimension,\n                    value: row_value\n                  };\n                  data_of_sources.push(result_hash);\n                }\n\n                $(\".\" + container_class).append(`\n                  <div class=\"${container_class + \"_\" + \"svg_container\"}\">\n\n                  </div>\n                  `);\n\n                  var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".\" + container_class + \"_\" + \"svg_container\", data_of_sources);\n                  horizontal_bar_chart.draw_chart();\n\n                  $(\".\" + container_class).append(`\n                    <div class=\"${container_class + \"_\" + \"svg_container_donut\"}\">\n\n                    </div>\n                    `);\n\n                  var donut_chart = new d3Charts.DonutChart(\".\" + container_class + \"_\" + \"svg_container_donut\", data_of_sources);\n                  donut_chart.draw_chart();\n\n                outer_promise_resolve(\"done\");\n\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n\n\n    })\n  }\n}\n\nexport function MonthlyRegexpPageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Übersicht für alle Seiten mit \"${page_name}\"</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:pageviews'\n                        },\n                        {\n                          expression: 'ga:uniquePageviews'\n                        },\n                        {\n                          expression: 'ga:sessions'\n                        },\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = [];\n                if(typeof response.result.reports[0].data.rows !== 'undefined'){\n                  metrics = response.result.reports[0].data.rows[0].metrics;\n                }\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[3]});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChart(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function SourceForRegexpPageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Quellen-Übersicht für alle Seiten mit \"${page_name}\"</h2>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [{startDate: dateRanges[0].startDate, endDate: dateRanges[dateRanges.length -1].endDate }],\n                      dimensions: [\n                        {\n                          name: \"ga:source\"\n                        }\n                      ],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                     ],\n                     \"orderBys\": [\n                       {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                     ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n                var data_of_sources = [];\n                var rows = response.result.reports[0].data.rows;\n\n                for (var i = 0; i < 15; i++) {\n                  var result_hash = {\n                    name: rows[i].dimensions[0],\n                    value: rows[i].metrics[0].values[0]\n                  };\n                  data_of_sources.push(result_hash);\n                }\n\n                $(\".\" + container_class).append(`\n                  <div class=\"${container_class + \"_\" + \"svg_container\"}\">\n\n                  </div>\n                  `);\n\n                  var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".\" + container_class + \"_\" + \"svg_container\", data_of_sources);\n                  horizontal_bar_chart.draw_chart();\n\n\n                  $(\".\" + container_class).append(`\n                    <div class=\"${container_class + \"_\" + \"svg_container_donut\"}\">\n\n                    </div>\n                    `);\n\n                  var donut_chart = new d3Charts.DonutChart(\".\" + container_class + \"_\" + \"svg_container_donut\", data_of_sources);\n                  donut_chart.draw_chart();\n\n                outer_promise_resolve(\"done\");\n\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n\n\n    })\n  }\n}\n"],"sourceRoot":""}