{"version":3,"file":"js/0-3e9de4fd98ff026e6716.chunk.js","sources":["webpack:///./app/javascript/packs/d3-charts.js"],"sourcesContent":[" export function HorizontalBarChart(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   }\n   this.get_max_value_of_array_with_hashes = function(data){\n     var array_with_values = [];\n     for (var i = 0; i < data.length; i++) {\n       array_with_values.push(data[i].value);\n    }\n\n    return Math.max(...array_with_values);\n\n   },\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = (this.data.length * 100) + 100 - margin.top - margin.bottom;\n     //var height = 500 - margin.top - margin.bottom;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        // Add X axis\n        const x = d3.scaleLinear()\n          .domain([0, this.get_max_value_of_array_with_hashes(data)])\n          .range([ 0, width]);\n        svg.append(\"g\")\n          .attr(\"transform\", `translate(0, ${height})`)\n          .call(d3.axisBottom(x))\n          .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        // Y axis\n        const y = d3.scaleBand()\n          .range([ 0, height ])\n          .domain(data.map(d => d.name))\n          .padding(.5);\n\n        svg.append(\"g\")\n          .call(d3.axisLeft(y).tickSize(0).tickValues([]));\n\n        //Bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"x\", x(0) )\n          .attr(\"y\", d => y(d.name))\n          .attr(\"width\", d => x(d.value))\n          .attr(\"height\", y.bandwidth())\n          .attr(\"fill\", \"#00c39b\");\n\n          //add name above the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(0) + 10)\n              .attr(\"y\", d => y(d.name) - y.bandwidth()/4)\n              .attr(\"dy\", \"0.35em\")\n              .attr(\"dx\", -4)\n              .text(d => d.name);\n\n          //add value inside the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(0) + 10)\n              .attr(\"y\", d => y(d.name) + y.bandwidth()/2)\n              .attr(\"dy\", \"0.35em\")\n              .attr(\"dx\", -4)\n              .text(d => d.value);\n\n   };\n\n }\n\n export function VerticalBarChart(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   }\n   this.get_max_value_of_array_with_hashes = function(data){\n     var array_with_values = [];\n     for (var i = 0; i < data.length; i++) {\n       array_with_values.push(data[i].value);\n    }\n\n    return Math.max(...array_with_values);\n\n   },\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = 500 - margin.top - margin.bottom;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        // Add y axis\n        const y = d3.scaleLinear()\n          .domain([0, this.get_max_value_of_array_with_hashes(data)])\n          .range([ height, 0]);\n\n        svg.append(\"g\")\n          .attr(\"transform\", `translate(0, 0)`)\n          .call(d3.axisLeft(y))\n          .selectAll(\"text\")\n            //.attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        // x axis\n        const x = d3.scaleBand()\n          .range([ 0, width ])\n          .domain(data.map(d => d.name))\n          .padding(.1);\n\n        svg.append(\"g\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n        //Bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"y\", d => y(d.value))\n          .attr(\"x\", d => x(d.name))\n          .attr(\"width\", x.bandwidth())\n          .attr(\"height\", d => height - y(d.value))\n          .attr(\"fill\", \"#00c39b\");\n\n          //add value at top of the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 12)\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              .style(\"text-anchor\", \"middle\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(d.name) + (x.bandwidth()/2))\n              .attr(\"y\", d => y(d.value))\n              .attr(\"dy\", -10)\n              .attr(\"dx\", 5)\n              .text(d => d.value);\n\n   };\n\n }\n\n export function VerticalBarChartGroupedTwo(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   }\n   this.get_max_value_of_array_with_hashes = function(data){\n     var array_with_values = [];\n     for (var i = 0; i < data.length; i++) {\n       array_with_values.push(data[i].value);\n    }\n\n    return Math.max(...array_with_values);\n\n   },\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = 500 - margin.top - margin.bottom;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        // Add y axis\n        const y = d3.scaleLinear()\n          .domain([0, this.get_max_value_of_array_with_hashes(data)])\n          .range([ height, 0]);\n\n        svg.append(\"g\")\n          .attr(\"transform\", `translate(0, 0)`)\n          .call(d3.axisLeft(y))\n          .selectAll(\"text\")\n            //.attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        // x axis\n        const x = d3.scaleBand()\n          .range([ 0, width ])\n          .domain(data.map(d => d.name))\n          .padding(.1);\n\n        svg.append(\"g\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n        //first bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"y\", d => y(d.value))\n          .attr(\"x\", d => x(d.name))\n          .attr(\"width\", x.bandwidth()/2 - 1)\n          .attr(\"height\", d => height - y(d.value))\n          .attr(\"fill\", \"#00c39b\");\n\n        //second bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"y\", d => y(d.value2))\n          .attr(\"x\", d => x(d.name) + (x.bandwidth()/2) + 1)\n          .attr(\"width\", x.bandwidth()/2)\n          .attr(\"height\", d => height - y(d.value2))\n          .attr(\"fill\", \"red\");\n\n          //add value at top of the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 12)\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              .style(\"text-anchor\", \"end\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(d.name) + (x.bandwidth()/4))\n              .attr(\"y\", d => y(d.value))\n              .attr(\"dy\", -10)\n              .attr(\"dx\", 5)\n              .text(d => d.value);\n\n              //add value2 at top of the bars\n              svg.append(\"g\")\n                  .attr(\"fill\", \"black\")\n                  .attr(\"font-family\", \"sans-serif\")\n                  .attr(\"font-size\", 12)\n                .selectAll(\"text\")\n                .data(data)\n                .join(\"text\")\n                  .style(\"text-anchor\", \"end\")\n                  //.attr(\"x\", d => x(d.value))\n                  .attr(\"x\", d => x(d.name) + ((x.bandwidth()/4)*3))\n                  .attr(\"y\", d => y(d.value2))\n                  .attr(\"dy\", -10)\n                  .attr(\"dx\", 5)\n                  .text(d => d.value2);\n\n   };\n\n }\n\n\n export function DonutChart(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   };\n   this.names_of_data = function(){\n     var names = [];\n     for (var i = 0; i < this.data.length; i++) {\n       names.push(this.data[i].name);\n     }\n     return names;\n   };\n   this.values_of_data = function(){\n     var values = [];\n     for (var i = 0; i < this.data.length; i++) {\n       values.push(this.data[i].values);\n     }\n     return values;\n   };\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = 500;\n     //var height = (this.data.length * 100) + 100 - margin.top - margin.bottom;\n     //var height = 500 - margin.top - margin.bottom;\n\n     // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n     var radius = Math.min(width, height) / 2 - 40;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${width/2},${height/2})`);\n\n          // Create dummy data\n          //data = {a: 9, b: 20, c:30, d:8, e:12, f:3, g:7, h:14}\n\n          // set the color scale\n          var data_keys = this.names_of_data();\n          var color = d3.scaleOrdinal().domain(this.names_of_data()).range(d3.schemeDark2);\n\n          // Compute the position of each group on the pie:\n          var pie = d3.pie()\n            .sort(null) // Do not sort group by size\n            .value(d => d.value)\n\n        var data_ready = pie(this.data);\n\n        // The arc generator\n        var arc = d3.arc()\n          .innerRadius(radius * 0.5)         // This is the size of the donut hole\n          .outerRadius(radius * 0.8)\n\n        // Another arc that won't be drawn. Just for labels positioning\n        var outerArc = d3.arc()\n          .innerRadius(radius * 0.9)\n          .outerRadius(radius * 0.9)\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n          .selectAll('allSlices')\n          .data(data_ready)\n          .join('path')\n          .attr('d', arc)\n          .attr('fill', d => color(d.index % this.data.length))\n          .attr(\"stroke\", \"white\")\n          .style(\"stroke-width\", \"2px\")\n          .style(\"opacity\", 0.7)\n\n        // Add the polylines between chart and labels:\n        svg\n          .selectAll('allPolylines')\n          .data(data_ready)\n          .join('polyline')\n            .attr(\"stroke\", \"black\")\n            .style(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1)\n            .attr('points', function(d) {\n              var posA = arc.centroid(d) // line insertion in the slice\n              var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n              var posC = outerArc.centroid(d); // Label position = almost the same as posB\n              var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n              posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n              return [posA, posB, posC]\n            })\n\n        // Add the polylines between chart and labels:\n        svg\n          .selectAll('allLabels')\n          .data(data_ready)\n          .join('text')\n            .text(d => this.names_of_data()[d.index] + \" - \" + d.value)\n            .attr('transform', function(d) {\n                var pos = outerArc.centroid(d);\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                return `translate(${pos})`;\n            })\n            .style('text-anchor', function(d) {\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                return (midangle < Math.PI ? 'start' : 'end')\n            })\n            //end of DonutChart\n\n   };\n\n }\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAOA;AAGA;AACA;AAOA;AAEA;AAAA;AAGA;AACA;AAGA;AAIA;AAAA;AACA;AAAA;AACA;AAIA;AAAA;AAOA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAEA;AAAA;AAOA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAIA;AAAA;AACA;AAOA;AAEA;AAAA;AAGA;AACA;AAIA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAGA;AAAA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAIA;AAAA;AACA;AAOA;AAEA;AAAA;AAGA;AACA;AAIA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAGA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAGA;AAAA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAEA;AAAA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AAQA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AAIA;AAKA;AAAA;AACA;AAKA;AAQA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;;;;;A","sourceRoot":""}