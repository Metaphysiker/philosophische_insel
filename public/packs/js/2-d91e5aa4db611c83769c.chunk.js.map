{"version":3,"sources":["webpack:///./app/javascript/packs/d3-charts.js"],"names":["HorizontalBarChart","container_class","data","this","empty_container","$","empty","get_max_value_of_array_with_hashes","array_with_values","i","length","push","value","Math","max","draw_chart","margin","width","height","svg","d3","select","append","attr","x","scaleLinear","domain","range","call","axisBottom","selectAll","style","y","scaleBand","map","d","name","padding","axisLeft","tickSize","tickValues","join","bandwidth","text","VerticalBarChart","VerticalBarChartGroupedTwo","value2","DonutChart","names_of_data","names","values_of_data","values","radius","min","color","scaleOrdinal","schemeDark2","data_ready","pie","sort","arc","innerRadius","outerRadius","outerArc","index","posA","centroid","posB","posC","midangle","startAngle","endAngle","PI","pos"],"mappings":"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","file":"js/2-d91e5aa4db611c83769c.chunk.js","sourcesContent":[" export function HorizontalBarChart(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   }\n   this.get_max_value_of_array_with_hashes = function(data){\n     var array_with_values = [];\n     for (var i = 0; i < data.length; i++) {\n       array_with_values.push(data[i].value);\n    }\n\n    return Math.max(...array_with_values);\n\n   },\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = (this.data.length * 100) + 100 - margin.top - margin.bottom;\n     //var height = 500 - margin.top - margin.bottom;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        // Add X axis\n        const x = d3.scaleLinear()\n          .domain([0, this.get_max_value_of_array_with_hashes(data)])\n          .range([ 0, width]);\n        svg.append(\"g\")\n          .attr(\"transform\", `translate(0, ${height})`)\n          .call(d3.axisBottom(x))\n          .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        // Y axis\n        const y = d3.scaleBand()\n          .range([ 0, height ])\n          .domain(data.map(d => d.name))\n          .padding(.5);\n\n        svg.append(\"g\")\n          .call(d3.axisLeft(y).tickSize(0).tickValues([]));\n\n        //Bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"x\", x(0) )\n          .attr(\"y\", d => y(d.name))\n          .attr(\"width\", d => x(d.value))\n          .attr(\"height\", y.bandwidth())\n          .attr(\"fill\", \"#00c39b\");\n\n          //add name above the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(0) + 10)\n              .attr(\"y\", d => y(d.name) - y.bandwidth()/4)\n              .attr(\"dy\", \"0.35em\")\n              .attr(\"dx\", -4)\n              .text(d => d.name);\n\n          //add value inside the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(0) + 10)\n              .attr(\"y\", d => y(d.name) + y.bandwidth()/2)\n              .attr(\"dy\", \"0.35em\")\n              .attr(\"dx\", -4)\n              .text(d => d.value);\n\n   };\n\n }\n\n export function VerticalBarChart(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   }\n   this.get_max_value_of_array_with_hashes = function(data){\n     var array_with_values = [];\n     for (var i = 0; i < data.length; i++) {\n       array_with_values.push(data[i].value);\n    }\n\n    return Math.max(...array_with_values);\n\n   },\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = 500 - margin.top - margin.bottom;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        // Add y axis\n        const y = d3.scaleLinear()\n          .domain([0, this.get_max_value_of_array_with_hashes(data)])\n          .range([ height, 0]);\n\n        svg.append(\"g\")\n          .attr(\"transform\", `translate(0, 0)`)\n          .call(d3.axisLeft(y))\n          .selectAll(\"text\")\n            //.attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        // x axis\n        const x = d3.scaleBand()\n          .range([ 0, width ])\n          .domain(data.map(d => d.name))\n          .padding(.1);\n\n        svg.append(\"g\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n        //Bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"y\", d => y(d.value))\n          .attr(\"x\", d => x(d.name))\n          .attr(\"width\", x.bandwidth())\n          .attr(\"height\", d => height - y(d.value))\n          .attr(\"fill\", \"#00c39b\");\n\n          //add value at top of the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 12)\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              .style(\"text-anchor\", \"middle\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(d.name) + (x.bandwidth()/2))\n              .attr(\"y\", d => y(d.value))\n              .attr(\"dy\", -10)\n              .attr(\"dx\", 5)\n              .text(d => d.value);\n\n   };\n\n }\n\n export function VerticalBarChartGroupedTwo(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   }\n   this.get_max_value_of_array_with_hashes = function(data){\n     var array_with_values = [];\n     for (var i = 0; i < data.length; i++) {\n       array_with_values.push(data[i].value);\n    }\n\n    return Math.max(...array_with_values);\n\n   },\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = 500 - margin.top - margin.bottom;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        // Add y axis\n        const y = d3.scaleLinear()\n          .domain([0, this.get_max_value_of_array_with_hashes(data)])\n          .range([ height, 0]);\n\n        svg.append(\"g\")\n          .attr(\"transform\", `translate(0, 0)`)\n          .call(d3.axisLeft(y))\n          .selectAll(\"text\")\n            //.attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        // x axis\n        const x = d3.scaleBand()\n          .range([ 0, width ])\n          .domain(data.map(d => d.name))\n          .padding(.1);\n\n        svg.append(\"g\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n        //first bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"y\", d => y(d.value))\n          .attr(\"x\", d => x(d.name))\n          .attr(\"width\", x.bandwidth()/2 - 1)\n          .attr(\"height\", d => height - y(d.value))\n          .attr(\"fill\", \"#00c39b\");\n\n        //second bars\n        svg.selectAll(\"myRect\")\n          .data(data)\n          .join(\"rect\")\n          .attr(\"y\", d => y(d.value2))\n          .attr(\"x\", d => x(d.name) + (x.bandwidth()/2) + 1)\n          .attr(\"width\", x.bandwidth()/2)\n          .attr(\"height\", d => height - y(d.value2))\n          .attr(\"fill\", \"red\");\n\n          //add value at top of the bars\n          svg.append(\"g\")\n              .attr(\"fill\", \"black\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 12)\n            .selectAll(\"text\")\n            .data(data)\n            .join(\"text\")\n              .style(\"text-anchor\", \"end\")\n              //.attr(\"x\", d => x(d.value))\n              .attr(\"x\", d => x(d.name) + (x.bandwidth()/4))\n              .attr(\"y\", d => y(d.value))\n              .attr(\"dy\", -10)\n              .attr(\"dx\", 5)\n              .text(d => d.value);\n\n              //add value2 at top of the bars\n              svg.append(\"g\")\n                  .attr(\"fill\", \"black\")\n                  .attr(\"font-family\", \"sans-serif\")\n                  .attr(\"font-size\", 12)\n                .selectAll(\"text\")\n                .data(data)\n                .join(\"text\")\n                  .style(\"text-anchor\", \"end\")\n                  //.attr(\"x\", d => x(d.value))\n                  .attr(\"x\", d => x(d.name) + ((x.bandwidth()/4)*3))\n                  .attr(\"y\", d => y(d.value2))\n                  .attr(\"dy\", -10)\n                  .attr(\"dx\", 5)\n                  .text(d => d.value2);\n\n   };\n\n }\n\n\n export function DonutChart(container_class, data) {\n   this.container_class = container_class;\n   this.data = data;\n   this.empty_container = function(){\n     $(this.container_class).empty();\n   };\n   this.names_of_data = function(){\n     var names = [];\n     for (var i = 0; i < this.data.length; i++) {\n       names.push(this.data[i].name);\n     }\n     return names;\n   };\n   this.values_of_data = function(){\n     var values = [];\n     for (var i = 0; i < this.data.length; i++) {\n       values.push(this.data[i].values);\n     }\n     return values;\n   };\n   this.draw_chart = function() {\n\n     this.empty_container();\n\n     var margin = {top: 50, right: 50, bottom: 50, left: 50};\n     var width = $(container_class).width() - margin.left - margin.right;\n     var height = 500;\n     //var height = (this.data.length * 100) + 100 - margin.top - margin.bottom;\n     //var height = 500 - margin.top - margin.bottom;\n\n     // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n     var radius = Math.min(width, height) / 2 - 40;\n\n       // append the svg object to the body of the page\n      const svg = d3.select(this.container_class)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${width/2},${height/2})`);\n\n          // Create dummy data\n          //data = {a: 9, b: 20, c:30, d:8, e:12, f:3, g:7, h:14}\n\n          // set the color scale\n          var data_keys = this.names_of_data();\n          var color = d3.scaleOrdinal().domain(this.names_of_data()).range(d3.schemeDark2);\n\n          // Compute the position of each group on the pie:\n          var pie = d3.pie()\n            .sort(null) // Do not sort group by size\n            .value(d => d.value)\n\n        var data_ready = pie(this.data);\n\n        // The arc generator\n        var arc = d3.arc()\n          .innerRadius(radius * 0.5)         // This is the size of the donut hole\n          .outerRadius(radius * 0.8)\n\n        // Another arc that won't be drawn. Just for labels positioning\n        var outerArc = d3.arc()\n          .innerRadius(radius * 0.9)\n          .outerRadius(radius * 0.9)\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n          .selectAll('allSlices')\n          .data(data_ready)\n          .join('path')\n          .attr('d', arc)\n          .attr('fill', d => color(d.index % this.data.length))\n          .attr(\"stroke\", \"white\")\n          .style(\"stroke-width\", \"2px\")\n          .style(\"opacity\", 0.7)\n\n        // Add the polylines between chart and labels:\n        svg\n          .selectAll('allPolylines')\n          .data(data_ready)\n          .join('polyline')\n            .attr(\"stroke\", \"black\")\n            .style(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1)\n            .attr('points', function(d) {\n              var posA = arc.centroid(d) // line insertion in the slice\n              var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n              var posC = outerArc.centroid(d); // Label position = almost the same as posB\n              var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n              posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n              return [posA, posB, posC]\n            })\n\n        // Add the polylines between chart and labels:\n        svg\n          .selectAll('allLabels')\n          .data(data_ready)\n          .join('text')\n            .text(d => this.names_of_data()[d.index] + \" - \" + d.value)\n            .attr('transform', function(d) {\n                var pos = outerArc.centroid(d);\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                return `translate(${pos})`;\n            })\n            .style('text-anchor', function(d) {\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                return (midangle < Math.PI ? 'start' : 'end')\n            })\n            //end of DonutChart\n\n   };\n\n }\n"],"sourceRoot":""}