{"version":3,"file":"js/1-e64736576058aa2887d3.chunk.js","sources":["webpack:///./app/javascript/packs/vegan_cockpit.js"],"sourcesContent":["export function MonthlyReview(container_class, dateRanges, view_id) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Übersicht</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:pageviews'\n                        },\n                        {\n                          expression: 'ga:uniquePageviews'\n                        },\n                        {\n                          expression: 'ga:sessions'\n                        },\n                        {\n                          expression: 'ga:users'\n                        }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = response.result.reports[0].data.rows[0].metrics;\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[3]});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart = new d3Charts.VerticalBarChart(\".\" + svg_container, data);\n                  vertical_bar_chart.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function MonthlyMemberPageReview(container_class, dateRanges, view_id, registrations) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.registrations = registrations,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var registrations = this.registrations;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Mitgliedseite-Übersicht</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n            <th scope=\"col\">Monat</th>\n            <th scope=\"col\">Users</th>\n            <th scope=\"col\">Neue Mitglieder</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           \"/mitglied-werden\"\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = response.result.reports[0].data.rows[0].metrics;\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  var value2 = 0;\n\n                  var year_month = \"registration-\" + date_of_current_row.getFullYear() + \"-\" + (\"0\" + (date_of_current_row.getMonth() + 1)).slice(-2);\n                  let registration_get = registrations.get(year_month);\n\n                  if(registration_get){\n                    value2 = registration_get;\n                  }\n\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${value2}</td>\n                  `);\n\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[0], value2: value2});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChartGroupedTwo(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function MonthlyDonationPageReview(container_class, dateRanges, view_id, donations) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.donations = donations,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var donations = this.donations;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Spendenseite-Übersicht</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n            <th scope=\"col\">Monat</th>\n            <th scope=\"col\">Users</th>\n            <th scope=\"col\">Spenden</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           \"/aktiv-werden/spenden\"\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = response.result.reports[0].data.rows[0].metrics;\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  var value2 = 0;\n\n                  var year_month = \"donation-\" + date_of_current_row.getFullYear() + \"-\" + (\"0\" + (date_of_current_row.getMonth() + 1)).slice(-2);\n                  let donation_get = donations.get(year_month);\n\n                  if(donation_get){\n                    value2 = donation_get;\n                  }\n\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${value2}</td>\n                  `);\n\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[0], value2: value2});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChartGroupedTwo(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\n\nexport function MonthlyMostVisitedPagesReview(container_class, dateRanges, view_id) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n\n      $(\".\" + container_class).empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      \"metrics\":\n                      [\n                        {\"expression\": \"ga:users\"},\n                      ],\n                      \"dimensions\":\n                      [\n                        {\"name\": \"ga:pagePath\"}\n                      ],\n                      \"orderBys\": [\n                        {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                      ]\n\n\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var table_name_with_index = table_name + \"_\" + main_index;\n\n                var date_of_current_row = new Date(dateRanges[main_index].startDate);\n\n                var rows = response.result.reports[0].data.rows;\n\n                var data_for_chart = [];\n\n                for (var rows_index = 0; rows_index < 11; rows_index++){\n                  data_for_chart.push({name: rows[rows_index].dimensions[0], value: rows[rows_index].metrics[0].values[0]});\n                }\n\n\n\n\n                $(\".\" + container_class).append(`\n                <h2>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</h2>\n                <table class=\"table ${table_name_with_index}\">\n                  <tbody class=\"tbody\">\n\n                  </tbody>\n                </table>\n                `);\n\n\n                for (var rows_index = 0; rows_index < 11; rows_index++){\n                  $(\".\" + table_name_with_index + \" .tbody\").append(`\n                  <tr>\n\n                  </tr>\n                  `);\n\n                  $(\".\" + table_name_with_index + \" tr:last\").append(`\n                    <td>${rows[rows_index].dimensions[0]}</td>\n                    <td>\n                      ${rows[rows_index].metrics[0].values[0]}\n                    </td>\n                  `);\n                }\n\n                $(\".\" + container_class).append(`\n                <div class=\"horizontal_bar_chart_name_${table_name_with_index}\">\n\n                </div>\n                `);\n\n                var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".horizontal_bar_chart_name_\" + table_name_with_index, data_for_chart);\n                horizontal_bar_chart.draw_chart();\n\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n\n  }\n}\n\nexport function MonthlySinglePageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Übersicht für \"${page_name}\"</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:pageviews'\n                        },\n                        {\n                          expression: 'ga:uniquePageviews'\n                        },\n                        {\n                          expression: 'ga:sessions'\n                        },\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"EXACT\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = [];\n                if(typeof response.result.reports[0].data.rows !== 'undefined'){\n                  metrics = response.result.reports[0].data.rows[0].metrics;\n                }\n\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[3]});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChart(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function MonthlySourceForSinglePageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Quellen-Übersicht für \"${page_name}\"</h2>\n\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      dimensions: [\n                        {\n                          name: \"ga:source\"\n                        }\n                      ],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"EXACT\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                     ],\n                     \"orderBys\": [\n                       {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                     ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n                var data_of_sources = [];\n                var rows = response.result.reports[0].data.rows;\n\n                for (var i = 0; i < 15; i++) {\n                  var result_hash = {\n                    name: rows[i].dimensions[0],\n                    value: rows[i].metrics[0].values[0]\n                  };\n                  data_of_sources.push(result_hash);\n                }\n\n                $(\".\" + container_class).append(`\n                  <div class=\"${container_class + \"_\" + \"svg_container_\" + main_index}\">\n\n                  </div>\n                  `);\n\n                  var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".\" + container_class + \"_\" + \"svg_container_\" + main_index, data_of_sources);\n                  horizontal_bar_chart.draw_chart();\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function SourceForSinglePageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Quellen-Übersicht für \"${page_name}\"</h2>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [{startDate: dateRanges[0].startDate, endDate: dateRanges[dateRanges.length -1].endDate }],\n                      dimensions: [\n                        {\n                          name: \"ga:source\"\n                        }\n                      ],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"EXACT\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                     ],\n                     \"orderBys\": [\n                       {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                     ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n                var data_of_sources = [];\n                var rows = [];\n                if(typeof response.result.reports[0].data.rows !== \"undefined\"){\n                  rows = response.result.reports[0].data.rows;\n                }\n\n                for (var i = 0; i < 15; i++) {\n                  var row_dimension = i;\n                  if((typeof rows[i] !== \"undefined\") && (typeof rows[i].dimensions[0] !== \"undefined\")){\n                    row_dimension = rows[i].dimensions[0];\n                  }\n\n                  var row_value = 0;\n                  if((typeof rows[i] !== \"undefined\") && (typeof rows[i].metrics[0].values[0] !== \"undefined\")){\n                    row_value = rows[i].metrics[0].values[0];\n                  }\n\n                  var result_hash = {\n                    name: row_dimension,\n                    value: row_value\n                  };\n                  data_of_sources.push(result_hash);\n                }\n\n                $(\".\" + container_class).append(`\n                  <div class=\"${container_class + \"_\" + \"svg_container\"}\">\n\n                  </div>\n                  `);\n\n                  var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".\" + container_class + \"_\" + \"svg_container\", data_of_sources);\n                  horizontal_bar_chart.draw_chart();\n\n                  $(\".\" + container_class).append(`\n                    <div class=\"${container_class + \"_\" + \"svg_container_donut\"}\">\n\n                    </div>\n                    `);\n\n                  var donut_chart = new d3Charts.DonutChart(\".\" + container_class + \"_\" + \"svg_container_donut\", data_of_sources);\n                  donut_chart.draw_chart();\n\n                outer_promise_resolve(\"done\");\n\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n\n\n    })\n  }\n}\n\nexport function MonthlyRegexpPageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Monatliche Übersicht für alle Seiten mit \"${page_name}\"</h2>\n        <table class=\"${table_name} table table-striped\">\n          <thead>\n\n            <tr class=\"head_tr\">\n              <th scope=\"col\">Monat</th>\n              <th scope=\"col\">Pageviews</th>\n              <th scope=\"col\">unique Pageviews</th>\n              <th scope=\"col\">Sessions</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n\n          </thead>\n          <tbody class=\"tbody\">\n\n          </tbody>\n        </table>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n      for (let main_index = 0, p = Promise.resolve(); main_index < dateRanges.length; main_index++)\n        {\n            p = p.then(() => new Promise(function(resolve, reject) {\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [dateRanges[main_index]],\n                      metrics: [\n                        {\n                          expression: 'ga:pageviews'\n                        },\n                        {\n                          expression: 'ga:uniquePageviews'\n                        },\n                        {\n                          expression: 'ga:sessions'\n                        },\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                      ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n\n                var metrics = [];\n                if(typeof response.result.reports[0].data.rows !== 'undefined'){\n                  metrics = response.result.reports[0].data.rows[0].metrics;\n                }\n                for (var i = 0; i < metrics.length; i++) {\n                  var values = metrics[i].values;\n                  $(\".\" + table_name + \" .tbody\").append(`\n                  <tr>\n                  </tr>\n                  `);\n                  var date_of_current_row = new Date(dateRanges[main_index].startDate);\n                  $(\".\" + table_name + \" tr:last\").append(`\n                    <td>${date_of_current_row.toLocaleDateString('de-DE', date_format_options)}</td>\n                  `);\n\n                  for (var inner_i = 0; inner_i < values.length; inner_i++) {\n                      $(\".\" + table_name + \" tr:last\").append(`\n                        <td>${values[inner_i]}</td>\n                      `);\n                  }\n\n                  data.push({name: date_of_current_row.toLocaleDateString('de-DE', {  year: '2-digit', month: 'short' }), value: values[3]});\n                }\n\n                resolve(\"done\");\n                if(main_index + 1 >= dateRanges.length){\n\n                  var vertical_bar_chart_grouped_two = new d3Charts.VerticalBarChart(\".\" + svg_container, data);\n                  vertical_bar_chart_grouped_two.draw_chart();\n\n                  outer_promise_resolve(\"this report is done\");\n                  //outer_promise_reject(\"error\");\n                }\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n            } // end of inner promise\n        ));\n      } // end of for loop\n    })\n  }\n}\n\nexport function SourceForRegexpPageReview(container_class, dateRanges, view_id, page_name) {\n  this.container_class = container_class,\n  this.dateRanges = dateRanges,\n  this.view_id = view_id,\n  this.page_name = page_name,\n  this.table_name = this.container_class + \"_table\",\n  this.svg_container = this.container_class + \"_svg_container\",\n  this.date_format_options = {  year: 'numeric', month: 'long' },\n  this.generate_report = function() {\n    var container_class = this.container_class;\n    var table_name = this.table_name;\n    var svg_container = this.svg_container;\n    var dateRange = this.dateRange;\n    var view_id = this.view_id;\n    var date_format_options = this.date_format_options;\n    var page_name = this.page_name;\n\n    return new Promise(function(outer_promise_resolve, outer_promise_reject)\n    {\n      var data = [];\n\n      $(\".\" + container_class).empty();\n\n      $(\".\" + container_class).append(`\n        <h2>Quellen-Übersicht für alle Seiten mit \"${page_name}\"</h2>\n\n        <div class=\"${svg_container}\">\n\n        </div>\n        `);\n\n    //  $(\".\" + table_name + \" .tbody\").empty();\n\n              gapi.client.request({\n                path: '/v4/reports:batchGet',\n                root: 'https://analyticsreporting.googleapis.com/',\n                method: 'POST',\n                body: {\n                  reportRequests: [\n                    {\n                      viewId: view_id,\n                      dateRanges: [{startDate: dateRanges[0].startDate, endDate: dateRanges[dateRanges.length -1].endDate }],\n                      dimensions: [\n                        {\n                          name: \"ga:source\"\n                        }\n                      ],\n                      metrics: [\n                        {\n                          expression: 'ga:users'\n                        }\n                      ],\n                      \"dimensionFilterClauses\": [\n                       {\n                        \"filters\": [\n                        {\n                         \"operator\": \"REGEXP\",\n                         \"dimensionName\": \"ga:pagePath\",\n                         \"expressions\": [\n                           page_name\n                          ]\n                        }\n                        ]\n                       }\n                     ],\n                     \"orderBys\": [\n                       {\"fieldName\": \"ga:users\", \"sortOrder\": \"DESCENDING\"},\n                     ]\n                    }\n                  ]\n                }\n              }).then(function(response){\n                var data_of_sources = [];\n                var rows = response.result.reports[0].data.rows;\n\n                for (var i = 0; i < 15; i++) {\n                  var result_hash = {\n                    name: rows[i].dimensions[0],\n                    value: rows[i].metrics[0].values[0]\n                  };\n                  data_of_sources.push(result_hash);\n                }\n\n                $(\".\" + container_class).append(`\n                  <div class=\"${container_class + \"_\" + \"svg_container\"}\">\n\n                  </div>\n                  `);\n\n                  var horizontal_bar_chart = new d3Charts.HorizontalBarChart(\".\" + container_class + \"_\" + \"svg_container\", data_of_sources);\n                  horizontal_bar_chart.draw_chart();\n\n\n                  $(\".\" + container_class).append(`\n                    <div class=\"${container_class + \"_\" + \"svg_container_donut\"}\">\n\n                    </div>\n                    `);\n\n                  var donut_chart = new d3Charts.DonutChart(\".\" + container_class + \"_\" + \"svg_container_donut\", data_of_sources);\n                  donut_chart.draw_chart();\n\n                outer_promise_resolve(\"done\");\n\n              }, function(error){\n                outer_promise_reject(\"error\");\n              })\n\n\n    })\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AANA;AAiCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAbA;AAFA;AAJA;AA4BA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA7DA;AAAA;AAjCA;AAAA;AACA;AA8BA;AACA;AAgEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AANA;AA+BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AATA;AAFA;AAJA;AAgCA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAhFA;AAAA;AA/BA;AAAA;AACA;AA4BA;AACA;AAmFA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AANA;AA+BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AATA;AAFA;AAJA;AAgCA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAhFA;AAAA;AA/BA;AAAA;AACA;AA4BA;AACA;AAmFA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAHA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAZA;AAFA;AAJA;AA2BA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AASA;AACA;AAMA;AAMA;AACA;AACA;AAMA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAtFA;AAAA;AANA;AAAA;AACA;AAGA;AACA;AAyFA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AANA;AAiCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AAlBA;AAFA;AAJA;AAyCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA/EA;AAAA;AAjCA;AAAA;AACA;AA8BA;AACA;AAkFA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AANA;AAkCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AAEA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AAYA;AACA;AAAA;AAAA;AA3BA;AAFA;AAJA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AArEA;AAAA;AAlCA;AAAA;AACA;AA+BA;AACA;AAwEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AADA;AAIA;AAEA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AAYA;AACA;AAAA;AAAA;AA3BA;AAFA;AAJA;AAuCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AANA;AAiCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AAlBA;AAFA;AAJA;AAyCA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA9EA;AAAA;AAjCA;AAAA;AACA;AA8BA;AACA;AAiFA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AADA;AAIA;AAEA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AAYA;AACA;AAAA;AAAA;AA3BA;AAFA;AAJA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAMA;AACA;AAGA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;;;;;A","sourceRoot":""}